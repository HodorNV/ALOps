{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ALOps","text":"<p>Welcome to ALOps, an extension for Microsoft Azure DevOps, for easily setting up build pipelines for AL Language Extensions, aka \"Microsoft Dynamics 365 Business Central Extensions\". </p>"},{"location":"#this_repository","title":"This Repository","text":"<p>The goal of this repository is to have information and documentation about the extension, as well as a place to communicate anything about the functionality.</p>"},{"location":"#menu","title":"Menu","text":"<p>Here, you can find more information about:</p> <ul> <li>Pricing</li> <li>Installation In DevOps</li> <li>List of all the buildsteps</li> <li>Setting up your first Build Pipeline</li> <li>Troubleshooting</li> <li>Q&amp;A</li> <li>Global Variables</li> <li>Working with Artifacts</li> </ul> <p></p>"},{"location":"#more_information_about_microsoft_dynamics_365_business_central","title":"More Information about Microsoft Dynamics 365 Business Central","text":"<p>Here is some more information about Microsoft Dynamics 365 Business Central</p> <ul> <li>The official homepage</li> <li>Microsoft Docs</li> <li>Customizing Business Central Using Extensions</li> </ul>"},{"location":"changelog/","title":"Change Log","text":"<p>All notable changes to the \"ALOps\" extension.</p>"},{"location":"changelog/#v1453_-_2022-10-12","title":"[v1.453] - 2022-10-12","text":"<ul> <li>ALOpsAppCompile: Expand appversiontemplate with Major/Minor application from app.json. (* = Build Nr / ? = Original Version / A = Application Version)</li> <li>ALOpsAppCompile: override global preprocessor symbols in app</li> <li>ALOpsAppCompile: Remove internalsVisibleTo property from app.json</li> <li>ALOpsAppPublish: Improved Get-AppOrder based on AppID</li> <li>ALOpsExtensionAPI: Added SchemaSyncMode option</li> <li>ALOpsExtensionAPI: Ignore Server 503 error when checking status</li> <li>General: improved generic assembly loading</li> </ul>"},{"location":"changelog/#v1451_-_2022-07-30","title":"[v1.451] - 2022-07-30","text":"<ul> <li>ALOpsAppLicenseCheck: Validate App(s) against License</li> <li>ALOpsAppPublish:  Sync-CheckOnly before Publish / Breaking Change detection</li> <li>ALOpsExtensionAPI: Added Client Certificate Authentication </li> <li>ALOpsExtensionAPI: DEV-Port Deploy enabled by specifying the additional parameter [dev_endpoint]</li> <li>ALOpsOpenAPI: Added Client Certificate Authentication </li> </ul>"},{"location":"changelog/#v1450_-_2022-07-03","title":"[v1.450] - 2022-07-03","text":"<ul> <li>ALOpsAppCompile: Custom CodeCop libraries </li> <li>ALOpsAppCompile: Optimize Get Latest VSIX</li> <li>ALOpsAppcompile: Use 64bit ALC.EXE when available</li> <li>ALOpsAppPublish: Allow publishing same version of an App</li> <li>ALOpsAppPublish: Increased default delays and retry count</li> <li>ALOpsAppTest: bugfix, set authentication to AAD instead of AccessControlService</li> <li>ALOpsAppTest: Testrunner Codeunit can be set with parameter [testrunnercodeunitid]</li> <li>ALOpsOpenAPI: Major performance improvents</li> </ul>"},{"location":"changelog/#v1449_-_2022-05-18","title":"[v1.449] - 2022-05-18","text":"<ul> <li>ALOpsAgentMaintenance: New parameter boolean 'pruneimagesosbased', allows for cleanup of images based on old OS</li> <li>ALOpsAppCompiler: Extra parameter 'suppressWarnings' allows for overwriting in the app.json. Options: \"KEEP\",\"NONE\", \"\" <li>ALOpsAppCompiler@2: Improved Assembly resolve, fixes the missing \"System.Collections.Immutable\" reference</li> <li>ALOpsAppCompiler@2: Ruleset not being applied when settings.json is missing</li> <li>ALOpsDockerCreate: OS Detection for Windows Server 2019 (2022)</li> <li>ALOpsExtensionAPI: More Resilient on Deployment, delay and max retries can be configured with [checksecondsdelay] and [maxtries]</li> <li>ALOpsInfo: Add feature to detect highest used Application version in any \"App.json\" file, saved in variable \"ALOPS_APPLICATION_VERSION\", \"ALOPS_APPLICATION_VERSION_MAJOR\", \"ALOPS_APPLICATION_VERSION_MINOR\"</li>"},{"location":"changelog/#v1448_-_2022-04-21","title":"[v1.448] - 2022-04-21","text":"<ul> <li>ALOpsInfo: Add feature to detect highest used Application version in any \"App.json\" file, saved in variable \"ALOPS_APPLICATION_VERSION\"</li> <li>ALOpsOpenAPI: Generate OpenAPI (Swagger) documentation based on Business Central API's</li> </ul>"},{"location":"changelog/#v1447_-_2022-01-24","title":"[v1.447] - 2022-01-24","text":"<ul> <li>ALOpsAppCompile: Allow values TRUE/FALSE for setting ResourceExposurePolicy</li> <li>ALOpsAppCompile: bugfix concerning disabling parallel compile</li> <li>ALOpsAppCompile: build in compatibility with applicationInsightsConnectionString </li> <li>ALOpsAppCompile: ignore Resourceexposurepolicy on runtime &lt;= 8.0</li> </ul>"},{"location":"changelog/#v1446_-_2021-11-25","title":"[v1.446] - 2021-11-25","text":"<ul> <li>ALOpsAppCompile (v1/v2):  Latest VSIX can be used by specifing \"LATEST\" in the alternative_vsix_path</li> <li>ALOpsAppCompile: Disable MAXDEGREEOFPARALELISM when 'Alops_DisableParallelCompile' is enabled</li> <li>ALOpsAppCompile: ResourceExposurePolicy - Auto remove ShowMyCode</li> <li>ALOpsAppCompile: Weeknumber correction, Activates on 1/1/2022</li> <li>ALOpsAppCompiler@2 - Provide support for resourceExposurePolicy</li> <li>ALOpsAppSign: improved NavSip setup for Azure Devops Hosted Agents</li> <li>ALOpsDockerCreate: catch pull failure for remote repositories with login</li> <li>ALOpsDockerStart: Map parameter for TaskScheduler</li> <li>ALOpsExtensionAPI: Error-handling on failure</li> <li>ALOpsExtensionAPI: improved failure detection, exit on timeout</li> </ul>"},{"location":"changelog/#v1445_-_2021-09-09","title":"[v1.445] - 2021-09-09","text":"<ul> <li>ALOpsAgentMaintenance: Additional cleanup of temporary folder with format ????????.??? </li> <li>ALOpsAppCompile: ignore download previous if AppSourceCop is not enabled</li> <li>ALOpsAppCompile: Parallel compile can now be disabled using boolean Environment Variable [Alops_DisableParallelCompile]</li> <li>ALOpsAppCompile: Solved locking issue on VSIX extract</li> <li>ALOpsCompile: Print full ALC output on failure exitcode</li> </ul>"},{"location":"changelog/#v1444_-_2021-07-05","title":"[v1.444] - 2021-07-05","text":"<ul> <li>All Tasks: The Artifact Publish Folder for DevOps can be manipulated via Environment variable [Alops_ArtifactPublishFolder], defaults is [Dynamics 365]</li> <li>ALOpsAppCompile: Improved parsing of BC Compile logs</li> <li>ALOpsAppCompile: Ruleset patch matching with DefaultWorkingDirectory</li> <li>ALOpsAppCompiler@2: Added [updatebuildnumber] conform v1. Updates the Build number with the App version in the pipeline.</li> <li>ALOpsAppPublish: Implemented auto Uninstall of Apps when \"Force Sync\" is used</li> <li>ALOpsAppSign: Can batch sign Apps compiled with ALOpsAppCompiler, use parameter [batchsigncompiledapps] to enabled</li> <li>ALOpsAppValidation: Get countries from AppSourceCop.json is parameter [countries] is empty/blank</li> <li>ALOpsDockerStart: Added [license] parameter, works with local path or Url</li> <li>ALOpsDockerStart: Improved Copy-Addins method for larger Add-ins, fixed the PermissionDenied exception.</li> </ul>"},{"location":"changelog/#v1443_-_2021-06-07","title":"[v1.443] - 2021-06-07","text":"<ul> <li>All Tasks: Fixed BC-Management module loading compatibility with BC v19</li> <li>ALOpsAgentMaintenance: Prune images based on CreationDate</li> <li>ALOpsAgentMaintenance: Remove VSIX folder when no platform of localised folders exists</li> <li>ALOpsAppCompiler@v1: Backported \"AL_Analyzer=NONE\" to disable analyzers</li> <li>ALOpsAppCompiler@v1: Backported \"publishxlif\" functionality from v2</li> <li>ALOpsAppTest: Increased interaction timeout, allowing for long running tests</li> <li>ALOpsDockerStart: \"docker_pull\" automatically disablen when using ALOpsDockerCreate images</li> <li>ALOpsDockerStart: Multiple Add-In DLL versions can now be used in parallell. Duplicate folder names are renamed.</li> </ul>"},{"location":"changelog/#v1442_-_2021-05-01","title":"[v1.442] - 2021-05-01","text":"<ul> <li>ALOpsAgentMaintenance: New integer parameter [pruneimagesdayscreated], when not zero Images are pruned based on creationdate</li> <li>ALOpsAppCompile: BC ServiceTier folder added in AssemblyProbingPaths</li> <li>ALOpsAppCompile: Global warnings and errors are now catched from ALC output</li> <li>ALOpsAppCompile: New boolean parameter [output_alc_logs] for disabling printing the ALC logs</li> <li>ALOpsAppCompile: New multiline parameter for specifying additional AssemblyProbingPaths, comma seperated string can also be used </li> <li>ALOpsAppValidation: Added parameters for specifying InstallApps and PreviousApps</li> </ul>"},{"location":"changelog/#v1441_-_2021-04-13","title":"[v1.441] - 2021-04-13","text":"<ul> <li>All Tasks : Disable script scanning for AV/Defender</li> <li>All Tasks: Fail Azure DevOps task on failed exit</li> <li>All Tasks: improved copy-item with literal path's, special character compatibility</li> <li>All Tasks: Improved performance for Expand-Archive with System.IO.Compression</li> <li>All Tasks: Improved powershell modules, Azure DevOps Diagnostics mode can be used</li> <li>ALOpsAppCompile: Detect ruleset feature, ignore when not available in ALC.EXE</li> <li>ALOpsAppCompile: Improved output parsing and Line detection</li> <li>ALOpsAppCompile: New parameter [applicationinsightskey] for registering ApplicationInsights</li> <li>ALOpsAppCompile: Print resulting app.json, allows for easy debugging</li> <li>ALOpsAppSignVerify: improved Path resolving of artifacts</li> <li>ALOpsAppTest:  Implemented [ExtensionID] based test-running</li> <li>ALOpsAppTest: Configurable filename for Test-Results allowing for multiple result files</li> <li>ALOpsAppValidation: Extra parameter [containername] for overruling the default containername used for validation</li> <li>ALOpsDockerStart: Improved Additional Parameter parsing, allows for variables via parameter injection</li> <li>ALOpsDockerWait: Improved parsing of Error and Warning strings</li> <li>ALOpsDockerWait: Multiline Warning and Error string parsing</li> <li>ALOpsDockerWait: Task failed with warning on WarningString matches</li> <li>ALOpsExtensionAPI: Configurable API Version via parameter [apiversion]</li> <li>ALOpsExtensionAPI: Easy parameters for Service2Service setup</li> <li>ALOpsExtensionAPI: Improved deploymentStatus validation / Connection recovery for SaaS</li> <li>ALOpsExtensionAPI: Poll dpeloyment status as Warning instead of Error</li> </ul>"},{"location":"changelog/#v1440_-_2021-02-17","title":"[v1.440] - 2021-02-17","text":"<ul> <li>ALOpsAppCompile: Parameter added to overwrite \"ShowMyCode\" manifest setting</li> <li>ALOpsAppCompile@1: download previous app for Breaking Changes check</li> <li>ALOpsAppCompile@1: Download previous version of App</li> <li>ALOpsAppCompile@2: improved unpacking for Artifacts</li> <li>ALOpsAppCompiler@2: Compatibility update for pre-BC-v15 versions</li> <li>ALOpsAppPublish: added parameter [forceinstall] which will force installation of Apps ignoring previous state</li> <li>ALOpsAppPublish: new parameter [publisherazureactivedirectorytenantid] </li> <li>ALOpsAppTest: Option to create test-suites on-the-fly by specifying the [testfilter] parameter</li> <li>ALOpsAppTest: Parameter added for loading DisabledTests via File or Url</li> <li>ALOpsAppValidation: new Task for running BcContainerHelper's AppValidation </li> <li>ALOpsDockerStart: improved unpacking for Artifacts</li> <li>ALOpsExtensionAPI: Alternate to BC-Artifacts when BC-Management DLL's are not available</li> <li>ALOpsExtensionAPI: Improved error catching on API calls</li> </ul>"},{"location":"changelog/#v1439_-_2021-02-05","title":"[v1.439] - 2021-02-05","text":"<ul> <li>All Tasks: Use same artifact folder names when publishing pipeline artifacts</li> <li>ALOpsAgentMaintenance: improved container/image pruning</li> <li>ALOpsAppPublish: ignore/skip errors when installing AL-Test-Apps</li> <li>ALOpsDockerStart: Added option for 'multitenant' environments</li> <li>ALOpsExtensionAPI: added Service-2-Service authentication, only client_id and client_secret is required</li> </ul>"},{"location":"changelog/#v1438_-_2020-12-31","title":"[v1.438] - 2020-12-31","text":"<ul> <li>ALOpsAppCompile: ALAnalyzer can be disabled by setting the parameter to 'NONE'</li> <li>ALOpsAppCompile: Ruleset can be disabled by setting it to 'NONE', Url's can be specificied for downloading remote rulesets</li> <li>ALOpsAppCompile@2: Allow custom VSIX for compilation. Filepath or Url.</li> <li>ALOpsAppCompile@2: Register NavSip in non-docker environments</li> <li>ALOpsAppSign: Improved AppFile resolving</li> <li>ALOpsAppSign: Improved path resolving / Register NavSip if required</li> <li>ALOpsDockerRemove: Action filter for SQL-Backup and EventLog extraction: Always or OnFailure</li> <li>ALOpsDockerRemove: EventLogs can be extracted from the container. Always or OnFailure.</li> </ul>"},{"location":"changelog/#v1437_-_2020-12-14","title":"[v1.437] - 2020-12-14","text":"<ul> <li>ALOpsAppCompile: Read CodeAnalyzers from VSCode settings</li> <li>ALOpsAppCompile@2: Define Ruleset via parameter [ruleset], overrules VSCode settings</li> <li>ALOpsAppCompile@2: Generate hash table of generated Apps in BatchCompile Mode</li> <li>ALOpsAppCompile@2: New string Parameter [appfilenametemplate] that allows for setting custom appnames, prefixes and suffixes</li> <li>ALOpsAppCompile@2: XLIF can be publsihed as Artifact by setting boolean parameter [publishxlif]</li> <li>ALOpsAppPublish: Installation of published Apps can be skipped by setting [installpublishedapps] = false</li> <li>ALOpsAppTest: [companyname] and [profile] can now be set for executing tests</li> <li>ALOpsDockerRemove: Export Container Database via new parameters [createsqlbackup], [sqlcompression], [zipsqlbackup], [publishsqlbackup]</li> <li>ALOpsFobImport: New boolean parameter [force_full_generate_symbol_reference], will trigger a full generate symbols after FOB Import.</li> </ul>"},{"location":"changelog/#v1436_-_2020-11-25","title":"[v1.436] - 2020-11-25","text":"<ul> <li>ALOPSAppCompile: implemented /parallel and /maxDegreeOfParallelism with VSCode defaults</li> <li>ALOPSAppCompile: new integer Global variable [alops_webrequest_timeout_ms] to set timeout for DownloadSymbols</li> <li>ALOPSAppCompile: Only copy Platform Apps if no Localized version exists</li> <li>ALOpsAppCompile@2: Escape AssemblyProbingPaths in pipeline log</li> <li>ALOPSAppPublish: Get-NAVAppInfo does not account for UTF-8, replace UTF8 characters in Build-Tag</li> <li>ALOPSAppPublish: Use Unique Folder for each Batch Publish</li> <li>ALOPSAppTest: New parameter [tenant] for targeting tests at a specific tenant</li> <li>ALOPSDockerCreate: Fail pipeline on Error, Force task status</li> <li>ALOPSDockerCreate: New string parameter [memory] with default 8G</li> <li>ALOPSDockerRemove: Exit status error when container does not exist</li> <li>Global: Show Task inputs for all Tasks</li> </ul>"},{"location":"changelog/#v1435_-_2020-10-11","title":"[v1.435] - 2020-10-11","text":"<ul> <li>ALOpsAgentMaintenance: New task that allows for auto-cleanup of BCArtifacts, Containers and ALOps Tasks</li> <li>ALOpsAppClean: allow removal of Microsoft Apps with new boolean parameter [includemicrosoftapps]</li> <li>ALOpsAppCompile: Added warning for square brackets in AppName/AppPublisher, Improved handling of FilePaths</li> <li>ALOpsAppCompile: Force copy non default [app.json]</li> <li>ALOpsAppPublish: Strict AL Apps installation. Added bool parameter [strictappnames]</li> <li>ALOpsDockerCreate: Allow usage of \"select\" parameter for NextMinor/NextMajor/...</li> <li>ALOpsDockerCreate: Default MultiTenant to false</li> <li>ALOpsDockerCreate: Silent BCContainerHelper installation, ignore install errors if BCContainerHelper is present</li> <li>ALOpsDockerStart: Reset default inputs when blanked out</li> <li>ALOpsExtensionAPI: Fail task on errors in App Publish</li> <li>ALOpsExtensionAPI: OAuth authentication when running in docker</li> <li>Global: added boolean [Alops_UpdateHostsFile] Environment Variable which will set/remove the current Container in the Hosts file on the agent</li> <li>Global: Install-Update BcContainerHelper bugfix</li> </ul>"},{"location":"changelog/#v1434_-_2020-09-15","title":"[v1.434] - 2020-09-15","text":"<ul> <li>ALOpsDockerCreate: Allow Clobber on BcContainerHelper</li> <li>ALOpsDockerCreate: allow usage of 'myScript' feature with multiline parameter [myscripts]</li> <li>ALOpsDockerCreate: Allow using BcContainerHelper pre-release</li> <li>ALOpsDockerCreate: Set type default to Sandbox for BcInsider</li> <li>ALOpsDockerCreate: Uninstall NavContainerHelper will not be implemented, AllowClobber and Fully Qualitified CmdLets instead</li> <li>ALOpsDockerStart: fixed bug with recycling containers</li> </ul>"},{"location":"changelog/#v1433_-_2020-08-25","title":"[v1.433] - 2020-08-25","text":"<ul> <li>ALOpsAppCompile: Save Extension Artifact path in global variable $(ALOPS_COMPILE_ARTIFACT)</li> <li>ALOpsAppPublish: New parameter [publish_scope] / [tenant]</li> <li>ALOpsAppTest: Dynamicly resolve .PSM1 file in case of Multi-Version installations</li> <li>ALOpsDockerCreate: added boolean parameter [forcecreateimage] to force image creation</li> <li>ALOpsDockerCreate: added parameter [imagenametemplate] to allow setting the image template name</li> <li>ALOpsDockerCreate: Added parameters [sastoken] and [storageaccount] to allow for Insider/Custom Artifact Urls</li> <li>ALOpsDockerCreate: New task that allows creating BC-Docker images from BC-Artifacts</li> <li>ALOpsDockerStart: Improved security on DockerLogin for Windows Server 2016</li> <li>ALOpsDockerStart: Never pull images on local registry</li> <li>ALOpsDockerWait: new parameter [printlogs] which can be used to disable log printing of docker logs</li> <li>ALOpsDockerWait: Reset Container IP in global variables [ALOPS_DOCKER_IPADDRESS]</li> <li>ALOpsExtensionAPI: Set parameters [artifact_path] default to [$(System.ArtifactsDirectory)]</li> </ul>"},{"location":"changelog/#v1432_-_2020-08-03","title":"[v1.432] - 2020-08-03","text":"<ul> <li>ALOpsAppCompile: UTF-8 compatibility, affects Extension names, Manifest parsing and Download Extension</li> <li>ALOpsAppPublish: Added boolean parameter [forcesync] allowing destructive changes</li> <li>ALOpsDockerStart: Compression performance, switched to DotNet ZIP instead of Powershell</li> <li>ALOpsDockerStart: Disable docker pull for local repository images bugfix</li> </ul>"},{"location":"changelog/#v1431_-_2020-06-30","title":"[v1.431] - 2020-06-30","text":"<ul> <li>ALOpsAppCompile: SSL Verification can now be disabled with the global boolean parameter [alops_disable_ssl]</li> <li>ALOpsAppCompile: UrlEncode on Url-Builder can now be disabled with global boolean variable named \"alops_disable_urlencoding\" (Character Convert)</li> <li>ALOpsAppCompiler: only upload compile log with \"PublishArtifacts\" enabled</li> <li>ALOpsAppPublish: Allow ForceSync via new boolean parameter [forcesync]</li> <li>ALOpsAppTest: Import Test Suite v17 / Auto add required Apps for Test-Suite</li> </ul>"},{"location":"changelog/#v1430_-_2020-05-31","title":"[v1.430] - 2020-05-31","text":"<ul> <li>All Tasks: Improved NAV/BC Module loading for Multi-Build environments</li> <li>ALOpsAppPublish: InstallAlTestTool - Auto add additional Apps required for the Test-Framework</li> <li>ALOpsAppTest: BC v16/v17 compatibility/improvements</li> <li>ALOpsDockerStart: Default value for parameter 'accept_image_outdated' set to \"TRUE\"</li> <li>ALOpsDockerWait: Report transfer ZIP size</li> <li>ALopsExtensionAPI: Auto select correct version of Module in Multi-Build environments</li> <li>Disable Cleanup old Tasks by default (Performance)</li> <li>Docker Based Tasks: Direct PSSession support to other container. Use global parameters [alops-docker-computer] / [alops-docker-username] / [alops-docker-password]</li> </ul>"},{"location":"changelog/#v1429_-_2020-04-30","title":"[v1.429] - 2020-04-30","text":"<ul> <li>All Tasks: Allow for Windows-Authentication in docker containers (GSMA)</li> <li>All Tasks: Improved error-handling on all REST calls</li> <li>ALOpsAppPublish: Allow updating Apps in Batch-Publish cfr single publish</li> <li>ALOpsAppPublish: AppUpgrade issues are now logged to the pipeline</li> <li>ALOpsAppPublish: Batch_Publish_Folder is now copied to the container on demand</li> <li>ALOpsAppPublish: enable force install dependency by default</li> <li>ALOpsAppTest: Error and Warning close dialog enhancement</li> <li>ALOpsExtensionAPI: new tasks to handle BC-Extensions API calls</li> <li>ALOpsFobImport: added parameter [override_finsql_path] which allows to override the default finsql.exe resolving</li> <li>ALOpsLicenseImport: License-Path made dynamics (filtering) instead of literal</li> <li>ALOpsSaaSGetExtension: Task is replaced by the new Task [ALOps Extension API]</li> <li>ALOpsSaasPublishExtension: Task is replaced by the new Task [ALOps Extension API]</li> </ul>"},{"location":"changelog/#v1428_-_2020-03-29","title":"[v1.428] - 2020-03-29","text":"<ul> <li>All Tasks: Dynamic resolve of Management DLL's for Multiversion NAV/BC installations</li> <li>ALOpsAppCompiler: compatibility with propagated dependencies</li> <li>ALOpsAppCompiler: improved direction of ALC.EXE output</li> <li>ALOpsAppCompiler: replace invalid path characters with underscore in App-Filename</li> <li>ALOpsAppPublish: removed 'Scope' parameter for NAV2018 compatibility</li> <li>ALOpsAppRuntimePackage: remove ShowMyCode for NAV20</li> <li>ALOpsAppTest: BC16 overwrite faulty standard Test-Libraries</li> <li>ALOpsAppTest: improved stability for BC15 / upgraded to work with BC16</li> <li>ALOpsDockerStart: auto split parameter [docker_parameters] so it can be set via Variables</li> <li>ALOpsDockerStart: only convert microsoft images to lowercase</li> <li>ALOpsDockerStart: parameter [vsix_download_path] enabled for use in docker containers</li> <li>ALOpsDockerWait: default behaviour changed, workfolder is now copied to the container on the WAIT step</li> <li>ALOpsFobImport: fixed empty \"servername\" parameter, improved GenerateSymbolReferences</li> <li>ALOpsFobImport: Generating symbol references can be enabled/disable with parameter [generate_symbol_reference]</li> <li>ALOpsFobImport: improved FinSql execution and error catching</li> <li>ALopsImportPackage: added parameter 'fixed_tag' for use with Docker</li> <li>ALOpsInfo: print extra information for debugging: diskspace, windows version, updates, memory stats...</li> <li>ALOpsLicenseImport: the scope of the license import can be set with parameter [license_scope]</li> </ul>"},{"location":"changelog/#v1427_-_2020-01-25","title":"[v1.427] - 2020-01-25","text":"<ul> <li>ALOpsAppClean: detect ServerInstance on custom Docker images</li> <li>ALOpsAppCompile: Allow to retain version parts from app.json. '*' is replaced by the build-id, '?' specifies to retain the version part of the orriginal app.json</li> <li>ALOpsAppCompile: Allow to update build number in DevOps</li> <li>ALOpsAppCompile: check docker info credentials</li> <li>ALOpsAppCompile: Multiroot workspace support</li> <li>ALOpsAppCompiler: Remove params [AssemblyProbingPaths] and [Ruleset] for NAV2018</li> <li>ALOpsAppPublish: new parameter [batch_publish_folder] which allows for batch publishing of Apps, install order is automatically detected</li> <li>ALOpsAppPublish: Set Path Variable</li> <li>ALOpsAppRuntimePackage: New task for creating runtime packages from existing Apps</li> <li>ALOpsAppSign: added instant validation of app after signing / Improved validation of timestamp</li> <li>ALOpsAppSign: Added parameter [pfx_password] for setting password additional to the environment variable </li> <li>ALOpsDockerStart: allow login with Keyvault instead of ServiceConnection</li> <li>ALOpsDockerWait: Added parameter [error_string] which allow to set an extra exit condition</li> <li>ALOpsLicenseImport: Disable print License by default, license can be printed in the pipeline by setting parameter [print_license_info]</li> <li>Documentation: added pipeline examples in documentation section</li> <li>General: Allow for Host/Container memory monitoring</li> <li>General: Improved Json Importing, printout json on parse failure</li> <li>General: task output of all task cleaned up / bulk logging transferred to verbose</li> </ul>"},{"location":"changelog/#v1426_-_2019-11-30","title":"[v1.426] - 2019-11-30","text":"<ul> <li>ALOpsAppCompile: Additional AssemblyProbingPaths via discovery</li> <li>ALOpsAppPublish: Allow for default AL Application installed in docker containers</li> <li>ALOpsAppTest: Allow selecting TestSuite via parameter [testsuite]</li> <li>ALOpsRepositoryPublish: added default icon for Apps without icon</li> </ul>"},{"location":"changelog/#v1425_-_2019-10-15","title":"[v1.425] - 2019-10-15","text":"<ul> <li>ALOpsAppCompile/ALOpsAppSign: new parameter [publish_artifact] to disable artifact publishing from step</li> <li>ALOpsAppCompile: Allow to set filename suffix</li> <li>ALOpsAppCompile: clean empty entries from Compile log artifact</li> <li>ALOpsAppPublish: Dynamic Resolving of App Artifacts / new parameter [artifact_path]</li> <li>ALOpsAppPublish: Install-AL-Apps for docker /  extra parameter [installaltesttool] en [install_al_app_names]</li> <li>ALOpsAppSign: Docker: Replace local artifact from container</li> <li>ALOpsAppSign: Dynamic Resolving of App Artifacts / new parameter [artifact_path]</li> <li>ALOpsAppSign: set Error instead of warning on DNSResolve</li> <li>ALOpsAppSignVerify: Dynamic Resolving of App Artifacts / new parameter [artifact_path]</li> <li>ALOpsAppTest: Wave2 compatibel, new parameters [testpage] en [installaltesttool]</li> <li>ALOpsDockerExec: new tasks that allows for running powershell scripts on the container</li> <li> <p>ALOpsDockerStart: Catch error on Docker login</p> </li> <li> <p>ALOpsDockerStart: parameter to ignore warning with fixed_tag</p> </li> <li>ALOpsImportFob: Dynamicly resolve .psm1 file, bypass via finsql for non standard installations</li> <li>ALOpsRepositoryPublish: Dynamic Resolving of App Artifacts / new parameter [artifact_path]</li> <li>ALOpsRepositoryPublish: New task in beta, allows publishing of the Extension to a repository in Business Central</li> <li>ALOpsSaaSPublishExtension: Allow folder upload of docker Applications for and PackageCache, new parameters [upload_package_cache] and [upload_c_applications]</li> <li>ALOpsSaaSPublishExtension: Dynamic Resolving of App Artifacts / new parameter [artifact_path]</li> <li>ALOpsSaaSPublishExtension: monitor/report deployment status</li> <li>Multi stage pipeline support</li> </ul>"},{"location":"changelog/#v1424_-_2019-09-17","title":"[v1.424] - 2019-09-17","text":"<ul> <li>ALOpsAppCompiler: Now allows for dynamic resolving of \"vsix_download_path\", wildcards can be used.</li> <li>ALOpsAppPublish: dynamic resolving of \"nav_artifact_app_filter\", wildcards can be used.</li> <li>ALOpsAppSign: dynamic resolving of \"nav_artifact_app_filter\", wildcards can be used.</li> <li>ALOpsAppSignVerify: dynamic resolving of \"nav_artifact_app_filter\", wildcards can be used.</li> <li>ALOpsAppTest: extend authentication to cover all scenarios</li> <li>ALOpsAppTest: update routines from NavContainerHelper</li> <li>ALOpsDockerStart: improvements made for compatibility for in use in Release Flows</li> <li>ALOpsSaaSPublishExtension: dynamic resolving of \"nav_artifact_app_filter\", wildcards can be used.</li> </ul>"},{"location":"changelog/#v1423_-_2019-08-30","title":"[v1.423] - 2019-08-30","text":"<ul> <li>ALOpsAppCompiler: Add 'bc_username' and 'bc_password' parameters  to  allow  basic authentication</li> <li>ALOpsAppSign: Add 'timestamp_uri' string parameter  to specify which timestamp server to use.</li> <li>ALOpsAppSign: Check Timestamp  server if specified, trigger warning when offline.</li> <li>ALOpsAppTest: Add 'bc_username' and 'bc_password' parameters  to  allow  basic authentication</li> <li>ALOpsLicenseImport: enabled FLF import from DockerHost and Repository location.</li> <li>ALOpsSaaSGetExtensions: Add 'azure_api_endpoint' string parameter to overrule API Endpoint.</li> <li>ALOpsSaaSGetExtensions: Add 'azure_api_version' picklist parameter to specify Azure API Version to use.</li> <li>ALOpsSaaSGetExtensions: Add 'bc_companyname'  string parameter to  specify target company.</li> <li>ALOpsSaaSPublishExtension: Add  'azure_api_endpoint' string parameter to overrule API Endpoint.</li> <li>ALOpsSaaSPublishExtension: Add 'azure_api_version' picklist parameter to specify Azure API Version to use.</li> <li>ALOpsSaaSPublishExtension: Add 'bc_companyname'  string parameter to  specify target company.</li> <li>ALOpsSaaSPublishExtension: Added retry loop on status check</li> <li>Docker: Retrieve ServerInstanceName from configuration for Wave2 compatibility.</li> <li>Improved Docker-Session management with Auto-Retry and Broken Connection detection.</li> <li>Improved the HelpMarkDown of all ALOps task inputs, variable names cleary visible in help.</li> </ul>"},{"location":"changelog/#v1422_-_2019-07-10","title":"[v1.422] - 2019-07-10","text":"<ul> <li>ALOpsAppClean: added missing dependency to 'Get-NAVAppDependencies'</li> <li>ALOpsAppCompiler: Extended AssemblyProbingPaths with \"c:\\windows\\assembly\"</li> <li>ALOpsAppTest: Add 'failed_test_action' picklist parameter. define action (Ignore / Warning / Error) to take when a Test(s) fails</li> <li>ALOpsDockerRemove: containers exited with errors are also removed instead of skipped</li> <li>ALOpsDockerWait: detect when container exited on error and fail build</li> <li>ALOpsSaaSPublishExtension: new Task in preview mode. Publish an AL extension to Business Central SaaS</li> <li>Framework: Update VstsTaskSDK from v0.10 to v0.11</li> <li>New environment boolean variable 'Alops_PrintMemoryStats', when enabled print the current memory status at the beginning of every task</li> <li>Print execution of external executables/commands to the devops build log</li> <li>Random Vsts Task Freezes: deadlocks in the StandardOutput and StandardError stream processing of the DevOps Agent / Mitigated by force closing the environment</li> </ul>"},{"location":"changelog/#v1421_-_2019-06-25","title":"[v1.421] - 2019-06-25","text":"<ul> <li>All PS1 files are CodeSigned for beter compatibility with standard powershell restrictions</li> <li>ALOpsAppClean: Add 'sync_mode' picklist parameter (Add/Clean/Development/ForceSync)</li> <li>ALOpsAppClean: enable for use in docker containers, use_docker parameter</li> <li>ALOpsAppTest: DisableNameChecking when importing Microsoft.Dynamics.Nav.Ide to avoid false warnings in pipeline</li> <li>ALOpsDockerRemove: added boolean parameter 'print_logs', default enabled. Prints logs on container remove.</li> <li>ALOpsDockerStart: Add -ltsc2019 or -ltsc2016 to Docker Image depending on OS</li> <li>ALOpsDockerStart: added parameter 'encryption_key', link a secret downloadable Url of the Encryption Key.</li> <li>ALOpsDockerStart: container can now be connected to Azure SQL Database</li> <li>ALOpsDockerStart: container can now be started based on a SQL BAK file via parameter 'sql_backup_file'</li> <li>ALOpsDockerStart: new default value for memory_gb parameter = '-1' (unlimited memory)</li> <li>ALOpsDockerStart: Print all docker parameters used for RUN command</li> <li>ALOpsFobImport: Added parameter for NAV Server Instance name</li> <li>ALOpsFobImport: allow for multiple FOB files to be imported in a single step, parameter 'filePath' can contain a filter like '.fob/*.fob'</li> <li>ALOpsFobImport: DisableNameChecking when importing Microsoft.Dynamics.Nav.Ide to avoid false warnings in pipeline</li> <li>ALOpsFobImport: integrate SQL-Database authentication for SQL mixed mode or Azure SQL</li> <li>ALOpsLicenseImport: Print flf license information before import</li> <li>ALOpsSaaSGetExtensions: new Task in preview mode, first of the SaaS enabled tasks. Displays the extensions installed in Business Central SaaS</li> <li>Templates: Corrected the version on the PublishTestResults step to Version 2, PublishTestResults@2</li> </ul>"},{"location":"changelog/#v1420_-_2019-06-17","title":"[v1.420] - 2019-06-17","text":"<ul> <li>Added YAML templates for AL Projects: https://dev.azure.com/HodorNV/ALOps%20Templates</li> <li>ALOpsAppCompiler: Added boolean parameter 'download_test_symbols' for enabling explicit Test-Package download</li> <li>ALOpsAppCompiler: Added parameter 'al_analyzer', a comma separated list of Analyzers. Example: PerTenantExtensionCop,UICop,CodeCop</li> <li>ALOpsAppCompiler: Automatically add AssemblyProbingPath if projects contains external controls</li> <li>ALOpsAppSign: The PFX password should be linked to the environment variable 'pfx_password'</li> <li>ALOpsAppTest: added Auto-Retry on the \"Warm-up\" step for the Test-Client</li> <li>ALOpsAppTest: Added boolean parameter 'import_testtoolkit', can be used to skip the import of the default test-suite-objects.</li> <li>ALOpsDockerStart: Added multi-line parameter 'docker_parameters', these will be added to the [docker run] command</li> <li>ALOpsDockerStart: Removed 'No container found' message when not working with Fixed-Docker-Tags</li> </ul>"},{"location":"Buildsteps/Buildstepsv1/","title":"Build Steps Overview","text":"<pre><code>Let's describe all the Build Steps that we have at our disposal\n</code></pre>"},{"location":"Buildsteps/Buildstepsv1/#alops_admincenter_api","title":"ALOps AdminCenter API","text":"<ul> <li>Interact with BC SaaS AdminCenter API.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAdminCenterAPI@1\ndisplayName: 'ALOps AdminCenter API'\ninputs:\nazure_tenant_id:                      # Azure Tenant Id. Only required for BC SaaS $(azure_tenant_id)\nazure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\nazure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\nazure_app_client_certificate:         # Azure AD Application Client Certificate. $(azure_app_client_certificate)\nazure_app_client_certificate_password: # Azure AD Application Client Certificate Password. $(azure_app_client_certificate_password)\nusername:                             # Business Central Username. Leave empty for Service-2-Service authentication. $(username)\npassword:                             # Business Central User Password. Leave empty for Service-2-Service authentication. $(password)\nchecksecondsdelay: 30                 # Seconds of delay betweel deployment status checks. $(checksecondsdelay)\nmaxtries: 20                          # Max tries for status check. $(maxtries)\ninteraction: environment_list         # Set Interaction to use. $(interaction)\nwait_for_operation: True              # Wait for operation. $(wait_for_operation)\nenvironment:                          # Source Environment. $(environment)\ntarget_environment:                   # Target Environment. $(target_environment)\nuse_update_window: False              # Use update window. $(use_update_window)\napp_id:                               # App ID. $(app_id)\naccept_isv_eula: False                # Accept ISV Eula. $(accept_isv_eula)\nforce_dependencies: False             # Force Dependencies. $(force_dependencies)\nconfirm_delete_data: False            # Confirm Delete Data. $(confirm_delete_data)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_agent_maintenance","title":"ALOps Agent Maintenance","text":"<ul> <li>Cleanup and maintain DevOps a Agent for Business Central.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAgentMaintenance@1\ndisplayName: 'ALOps Agent Maintenance'\ninputs:\nremoveoldtasks: False                 # Remove old ALOps tasks. $(removeoldtasks)\nremoveunusedcontainers: False         # Force docker container pruning. $(removeunusedcontainers)\npruneimagesdayscreated: 0             # Force docker image pruning based on creation date (x days). $(pruneimagesdayscreated)\npruneimagesosbased: False             # Prune images based on old OS. $(pruneimagesosbased)\nremovebcartifacts: False              # Remove BC Artifacts. $(removebcartifacts)\nbcartifactscachefolder: C:\\bcartifacts.cache# Set non-default BC Artifact Cache folder. $(bcartifactscachefolder)\ndaysunused: 30                        # Define date-range for cleanup BC-Artifacts. $(daysunused)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_license_check","title":"ALOps App License Check","text":"<ul> <li>Check App files agains a license.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppLicenseCheck@1\ndisplayName: 'ALOps App License Check'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nlicensefile:                          # Set the BC License File. Path or Url. $(licensefile)\nartifact_path: $(System.ArtifactsDirectory)# Path for App Artifact. $(artifact_path)\nartifact_filter: *.app                # Filter used for locating App file relative to $(artifact_path). $(artifact_filter)\nartifact_include:                     # Include-Filter used for locating App file relative to $(artifact_path). $(artifact_include)\nartifact_exclude:                     # Exclude-Filter used for locating App file relative to $(artifact_path). $(artifact_exclude)\nexclude_ranges:                       # Exclude-Ranges from LicenseCheck (Buffer / Tempory tables). Format: 60000..60099,70000..70100 $(exclude_ranges)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_runtime_package","title":"ALOps App Runtime Package","text":"<ul> <li>Get a NAV App runtime package for onprem deployment.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppRuntimePackage@1\ndisplayName: 'ALOps App Runtime Package'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nnav_serverinstance: BC140             # Specifies the name of a Business Central Server instance. $(nav_serverinstance)\nnav_tenant: default                   # Specifies the ID of a specific tenant that you want to act on, such as Tenant1. $(nav_tenant)\ntargetproject: ./app.json             # Path of the project to export as RuntimePackage. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(targetproject)\nshowmycode: False                     # Overwrites the ShowMyCode value in the manifest. $(showmycode)\npublish_artifact: True                # Publish generated Runtime-App Artifact to DevOps. $(publish_artifact)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_sign","title":"ALOps App Sign","text":"<ul> <li>Codesign Business Central extension with .pfx.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppSign@1\ndisplayName: 'ALOps App Sign'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nbatchsigncompiledapps: False          # Batch Sign Apps taged by ALOpsAppCompile task. $(batchsigncompiledapps)\nartifact_path:                        # Path for storing App Artifact. $(artifact_path)\nnav_artifact_app_filter: *.app        # Path of the App to Codesign. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(nav_artifact_app_filter)\npfx_path:                             # Path or Url of the PFX file. $(pfx_path)\ntimestamp_uri:                        # Uri of the timestamp service used during signing. $(timestamp_uri)\npublish_artifact: True                # Publish generated App Artifact to DevOps. $(publish_artifact)\npfx_password:                         # Password for the PFX File. Recommended to use Azure-KeyVault secrets. $(pfx_password)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_sign_verify","title":"ALOps App Sign Verify","text":"<ul> <li>Verify CodeSign of Business Central extension.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppSignVerify@1\ndisplayName: 'ALOps App Sign Verify'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nartifact_path:                        # Path for App Artifact. $(artifact_path)\nnav_artifact_app_filter: *.app        # Path of the App to verify. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(nav_artifact_app_filter)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_test","title":"ALOps App Test","text":"<ul> <li>Run Business Central Test-Suite and collect results.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppTest@1\ndisplayName: 'ALOps App Test'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nnav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\ntenant: default                       # Business Central Tenant. $(tenant)\ncompanyname:                          # Business Central Company. $(companyname)\nprofile:                              # Business Central Profile. $(profile)\nbc_username:                          # BC Username for ServiceTier connection. $(bc_username)\nbc_password:                          # BC User Password for ServiceTier connection. $(bc_password)\nbc_authentication: NavUserPassword    # BC Authentication type of the ServiceTier. $(bc_authentication)\nbc_webclient_url:                     # BC WebClient Endpoint. $(bc_webclient_url)\ntestfilter:                           # Filter codeunits to include in Test-Suite. $(testfilter)\ndisabledtests:                        # Disabled Tests File. $(disabledtests)\nshow_available_tests: True            # Show all available tests. $(show_available_tests)\nimport_testtoolkit: True              # Import TestToolKit FOB. $(import_testtoolkit)\nimport_action: Overwrite              # Import Action for importing Test-Suite FOB files. $(import_action)\ntestpage: 130409                      # Set the PageId used for testing. $(testpage)\ntestsuite: DEFAULT                    # Set target Test Suite to activate. $(testsuite)\nextensionid:                          # Set Extension ID. $(extensionid)\ninstallaltesttool: False              # Install the AL TestTool for v15. $(installaltesttool)\nfailed_test_action: Warning           # Action to take when a Test failed. $(failed_test_action)\noverride_finsql_path:                 # Overrule automatic detection of FinSql with fixed value. $(override_finsql_path)\nresultfilename: TestResults.xml       # Set filename for the Result XML. $(resultfilename)\ntestrunnercodeunitid:                 # Set the Codeunit Id for the test-runner to use. $(testrunnercodeunitid)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_validation","title":"ALOps App Validation","text":"<ul> <li>Validate App from Business Central AppSource.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppValidation@1\ndisplayName: 'ALOps App Validation'\ninputs:\nlicense_path:                         # Path of the FLF license to import. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory) or a downloadable Url. $(license_path)\ncountries:                            # Comma seperated array of countries to validate. When blank SupportedCountries value from AppSourceCop.json is used. $(countries)\naffixes:                              # Comma seperated array of affixes. $(affixes)\nartifact_path: $(System.ArtifactsDirectory)# Path for App Artifact(s). $(artifact_path)\nartifact_filter: *.app                # Filter used for locating App file relative to $(artifact_path). $(artifact_filter)\ninstallapps_path: $(System.ArtifactsDirectory)# Path for InstallApps Artifact(s). $(installapps_path)\ninstallapps_filter: *.app             # Filter used for locating App file relative to $(installapps_path). $(installapps_filter)\npreviousapps_path: $(System.ArtifactsDirectory)# Path for PreviousApps Artifact(s). $(previousapps_path)\npreviousapps_filter: *.app            # Filter used for locating App file relative to $(previousapps_path). $(previousapps_filter)\nmemory: 8G                            # Set maximum memory for Container. $(memory)\nvalidateversion:                      # Full or partial version number. If specified, apps will also be validated against this version. $(validateversion)\nvalidatecurrent: False                # Validate against current version of Business Central. $(validatecurrent)\nvalidatenextminor: False              # Validate against Next Minor version of Business Central. $(validatenextminor)\nvalidatenextmajor: False              # Validate against Next Major version of Business Central. $(validatenextmajor)\nsastoken:                             # SAS Token used to access Storage Account. $(sastoken)\nskipverification: False               #  $(skipverification)\nskipappsourcecop: False               #  $(skipappsourcecop)\nincludewarnings: False                # Include this switch if you want to include Warnings. $(includewarnings)\nfailonerror: True                     # Include this switch if you want to fail on the first error instead of returning all errors to the caller. $(failonerror)\ncontainername: bcserver               # Only required when running multiple DevOps Agents on the same server. (Not recommended) $(containername)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_cleaner","title":"ALOps App Cleaner","text":"<ul> <li>Remove all extensions from Business Central service tier.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppClean@1\ndisplayName: 'ALOps App Cleaner'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nnav_computername: localhost           # Target Business Central Server running service tier. $(nav_computername)\nnav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\nsync_mode: Add                        # Mode for synchronizing Business Central extensions. $(sync_mode)\nincludemicrosoftapps: False           # Include Microsoft Apps. $(includemicrosoftapps)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_copy","title":"ALOps App Copy","text":"<ul> <li>Copy Business Central extensions from one service tier to another.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppCopy@1\ndisplayName: 'ALOps App Copy'\ninputs:\nnav_computername: localhost           # Target Business Central Server running service tier. $(nav_computername)\nnav_serverinstance_source: BC140      # Source Business Central service tier to copy from. $(nav_serverinstance_source)\nnav_serverinstance_target: BC140      # Target Business Central service tier to copy to. $(nav_serverinstance_target)\nnav_app_storage:                      # Path used for temporary extension storage. $(nav_app_storage)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_compiler","title":"ALOps App Compiler","text":"<ul> <li>Compile a Business Central extension from AL code.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppCompiler@1\ndisplayName: 'ALOps App Compiler'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\ntargetproject: ./app.json             # Path of the project to compile. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(targetproject)\nnav_computername:                     # Target Business Central Server running service tier. $(nav_computername)\nnav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\nnav_tenant: default                   # NAV Tenant used for symbols and compiling the app. $(nav_tenant)\nnav_ports_dev: 7049                   # NAV Port used for DEV-Service. $(nav_ports_dev)\nbc_username:                          # BC Username for ServiceTier connection. $(bc_username)\nbc_password:                          # BC User Password for ServiceTier connection. $(bc_password)\nal_compiler_version: 0.12.15355       # AL Compiler version used for compiling. $(al_compiler_version)\nruleset:                              # Overrule the Ruleset from VSCode settings. Path relative to [alsourcepath] $(ruleset)\nsuppresswarnings: KEEP                # Overrule the 'suppresswarnings' setting. $(suppresswarnings)\nal_analyzer:                          # AL Analyzer(s) used for compiling. (Example: CodeCop,UICop) $(al_analyzer)\nnav_app_version: 1.0.*.0              # Template for versioning NAV-Apps. '*' is replaced by the current Build Number. $(nav_app_version)\nvsix_download_path:                   # Alternative VSIX download url. 'Latest' can be specified. $(vsix_download_path)\nuse_ssl: False                        # Use SSL for Business Central connections. $(use_ssl)\ndownload_test_symbols: False          # Download Test Symbols explicitly (without Test-Version reference in App.json). $(download_test_symbols)\nusecompression: True                  # Compress Source-Folder for transfer to docker container. $(usecompression)\npublish_artifact: True                # Publish generated App Artifact to DevOps. $(publish_artifact)\npublishxlif: False                    # Publish generated XLIF to DevOps. $(publishxlif)\nfailed_on_warnings: False             # Fail task when any warning occurs. $(failed_on_warnings)\napp_file_suffix:                      # Set a suffix tag on the compiled App filename. $(app_file_suffix)\nupdatebuildnumber: True               # Update the Build number with the current version. $(updatebuildnumber)\nsetup_working_folder: False           # Copy working folder to Docker container. $(setup_working_folder)\nshowmycode: Keep                      # Overrule ShowMyCode by setting other option than 'Keep'. $(showmycode)\nresourceexposurepolicy_allowdebugging: Keep# Overrule allowDebugging by setting other option than 'Keep'. $(resourceexposurepolicy_allowdebugging)\nresourceexposurepolicy_allowdownloadingsource: Keep# Overrule allowDownloadingSource by setting other option than 'Keep'. $(resourceexposurepolicy_allowdownloadingsource)\nresourceexposurepolicy_includesourceinsymbolfile: Keep# Overrule includeSourceInSymbolFile by setting other option than 'Keep'. $(resourceexposurepolicy_includesourceinsymbolfile)\ninternalsvisibleto: Keep              # Remove internalsVisibleTo by setting other option than 'Keep'. $(internalsvisibleto)\npreprocessorsymbols:                  # Overwrite the preprocessorSymbols in app.json, comma seperated string. Set to 'NONE' to remove. $(preprocessorsymbols)\napplicationinsightskey:               # Overwrite the ApplicationInsightsKey in app.json. Set to 'NONE' to remove InsightsKey. $(applicationinsightskey)\nprintappmanifest: True                # Print the final app.json before compile. $(printappmanifest)\noutput_alc_logs: True                 # Output ALC logs. $(output_alc_logs)\nadditionalprobingpaths:               # Add additional Assembly probing Paths. $(additionalprobingpaths)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_docker_create","title":"ALOps Docker Create","text":"<ul> <li>Create Docker image based on NAV/BC Artifacts.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsDockerCreate@1\ndisplayName: 'ALOps Docker Create'\ninputs:\nartifactspecification: Specific       # Set Artifact resolve method. $(artifactspecification)\nartifactversion:                      # BC/NAV Version, eg: 9, 10.4, NAV2016, 16.4.24524. $(artifactversion)\nartifacttype: OnPrem                  # Set Artifact Type. $(artifacttype)\nartifactcountry:                      # The Country for the Artifact. $(artifactcountry)\nversionselect: Latest                 # The version to be selected from the Artifacts. $(versionselect)\nartifacthint:                         # . $(artifacthint)\nmultitenant: False                    # Create a Multi-Tenant image. $(multitenant)\nmemory: 8G                            # Set maximum memory for Container. $(memory)\nimageprefix: myImage                  # New image name, tag defined by $(imagenametemplate). $(imageprefix)\ndockerregistry:                       # Docker registry Pull/Push, example: 'bcinsider.azurecr.io', or 'repo.mydomain.com' $(dockerregistry)\ndockerusername:                       # Docker login username. $(dockerusername)\ndockerpassword:                       # Docker login password. $(dockerpassword)\nstorageaccount:                       # Non Default Storage Account. $(storageaccount)\nsastoken:                             # SAS Token used to access Storage Account. $(sastoken)\nforcecreateimage: False               # Forces image creation, skipping Pull image. $(forcecreateimage)\nmyscripts:                            # Specify myScripts to be added to the image. $(myscripts)\nimagenametemplate: %IMAGE_PREFIX%:%ARTIFACT_TYPE%-%ARTIFACT_VERSION%-%ARTIFACT_COUNTRY%-%OS_VERSION%-%OS_LTSC%# Template for defining Image names or using a fixed name $(imagenametemplate)\nlicensefile:                          # BC License File to be included in the Image $(licensefile)\nincludetesttoolkit: False             # Included the TestToolkit in created image. $(includetesttoolkit)\nincludetestlibrariesonly: False       # Included only the Test-Libraries in created image. $(includetestlibrariesonly)\nincludetestframeworkonly: False       # Included only the Test-Framework in created image. $(includetestframeworkonly)\nincludeperformancetoolkit: False      # Include Performance-Toolkit in created image. $(includeperformancetoolkit)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_docker_execute","title":"ALOps Docker Execute","text":"<ul> <li>Execute powershell script in container.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsDockerExec@1\ndisplayName: 'ALOps Docker Execute'\ninputs:\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nscriptsource: InLine                  # Set type for requiring the script. $(scriptsource)\nscript_location:                      # Location of the script to fetch. $(script_location)\ninline_script: # Write your powershell commands here.\nWrite-Host \"Hello World\"\n# Inline Powershell Script. $(inline_script)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_docker_remove","title":"ALOps Docker Remove","text":"<ul> <li>Remove Business Central docker container.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsDockerRemove@1\ndisplayName: 'ALOps Docker Remove'\ninputs:\nusedocker: True                       # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nprint_logs: True                      # Print all container logs before remove. $(print_logs)\ncreateeventlogbackup: disabled        # Create EventLog Backup from Container. $(createeventlogbackup)\ncreatesqlbackup: disabled             # Create SQL Backup from Container Database. $(createsqlbackup)\npublishsqlbackup: True                # Published the SQL Backup as Build-Artifact. $(publishsqlbackup)\nsqlcompression: False                 # Create Compressed SQL Backup (does not work on SQL-Express). $(sqlcompression)\nzipsqlbackup: True                    # ZIP the SQL Backup. $(zipsqlbackup)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_docker_start","title":"ALOps Docker Start","text":"<ul> <li>Start Business Central docker container.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsDockerStart@1\ndisplayName: 'ALOps Docker Start'\ninputs:\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nignore_no_container_warning: False    # Do not trigger warning when container with [fixed_tag] is not found. $(ignore_no_container_warning)\ndocker_image: $(ALOPS_BC_IMAGE)       # Business Central docker Image to Start. $(docker_image)\naccept_image_eula: True               # Accept Eula of docker image. $(accept_image_eula)\naccept_image_outdated: True           # Accept Outdated image. $(accept_image_outdated)\nenable_symbol_loading: False          # Enable Symbol Loading. $(enable_symbol_loading)\nenable_api_services: False            # Enable API Services. $(enable_api_services)\nmultitenant: False                    # Create a Multi-Tenant container. $(multitenant)\ndocker_pull: True                     # Force Pull docker image. $(docker_pull)\ndockerauthentication: None            # Set authentication Method to use. $(dockerauthentication)\ndocker_login:                         # Select the generic login to use for docker. If needed, click on 'manage', and add a new Service Endpoint of type 'Generic' $(docker_login)\ndocker_username:                      # Docker login username. $(docker_username)\ndocker_password:                      # Docker login password. $(docker_password)\ndocker_registry:                      # Docker registry for login, example: 'bcinsider.azurecr.io' $(docker_registry)\nmemory_gb: -1                         # Set maximum memory for container in GB. $(memory_gb)\ncontainer_restart: no                 # Set docker container restart preference. $(container_restart)\nlicensefile:                          # Set the BC License File. Path or Url. $(licensefile)\ndocker_parameters:                    # Specify additional docker parameters. $(docker_parameters)\nsql_server:                           # External SQL Server. $(sql_server)\nsql_server_instance:                  # External SQL Server Instance. $(sql_server_instance)\nsql_database:                         # External SQL Database. $(sql_database)\nsql_database_user:                    # External SQL Database User. $(sql_database_user)\nsql_database_user_password:           # External SQL Database Password. $(sql_database_user_password)\nsql_backup_file:                      # Restore BAK file on startup. $(sql_backup_file)\nencryption_key:                       # Encryption key for Service Tier. $(encryption_key)\ntaskscheduler: Keep                   # Overrule EnableTaskScheduler by setting other option than 'Keep'. $(taskscheduler)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_docker_wait","title":"ALOps Docker Wait","text":"<ul> <li>Wait until the Business Central container is started.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsDockerWait@1\ndisplayName: 'ALOps Docker Wait'\ninputs:\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nsearch_string: Ready for connections! # String to match in Docker Logs and return. $(search_string)\nwarning_string:                       # Show as Warning when the container logs contain the warning string. $(warning_string)\nerror_string:                         # Throw error when the container logs contain the error string. $(error_string)\nsetup_working_folder: True            # Copy working folder to Docker container. $(setup_working_folder)\nusecompression: True                  # Compress Source-Folder for transfer to docker container. $(usecompression)\nprintlogs: True                       # Print all container logs. $(printlogs)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_extension_api","title":"ALOps Extension API","text":"<ul> <li>Get/Publish extensions with the Business Central API.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsExtensionAPI@1\ndisplayName: 'ALOps Extension API'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\ninteraction: get                      # Set Interaction Method to use. (Get/Publish/Batch Publish). $(interaction)\napi_endpoint: https://api.businesscentral.dynamics.com/v2.0/$(azure_tenant_id)/Sandbox/api# Set API Endpoint. (protocol://host:port/serverinstance/api) $(api_endpoint)\ndev_endpoint:                         # Set DEV Endpoint. (protocol://host:port/serverinstance/dev) $(dev_endpoint)\ndev_schemeupdatemode: synchronize     # Set Schema Update Mode to use with DEVPort deploy. (synchronize/recreate/forcesync) $(dev_schemeupdatemode)\napiversion: v1.0                      # Version of the API to use (beta / v1.0 / v2.0) $(apiversion)\nauthentication: oauth                 # Set authentication Method to use. Default [Windows]. $(authentication)\nazure_tenant_id:                      # Azure Tenant Id. Only required for BC SaaS $(azure_tenant_id)\nazure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\nazure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\nazure_app_client_certificate:         # Azure AD Application Client Certificate. $(azure_app_client_certificate)\nazure_app_client_certificate_password: # Azure AD Application Client Certificate Password. $(azure_app_client_certificate_password)\nusername:                             # Business Central Username. Leave empty for Service-2-Service authentication. $(username)\npassword:                             # Business Central User Password. Leave empty for Service-2-Service authentication. $(password)\nbccompany:                            # Business Central Company (Id or Name). $(bccompany)\nartifact_path: $(System.ArtifactsDirectory)# Path for App Artifact. $(artifact_path)\nartifact_filter: *.app                # Filter used for locating App file relative to $(path_to_publish). $(artifact_filter)\nshowdeploymentstatus: True            # Show Extension Deployment Status. $(showdeploymentstatus)\nchecksecondsdelay: 30                 # Seconds of delay betweel deployment status checks. $(checksecondsdelay)\nmaxtries: 20                          # Max tries for status check. $(maxtries)\nreplacepackageid: False               # Force a new PackageID for each deployment. $(replacepackageid)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_import_fob","title":"ALOps Import FOB","text":"<ul> <li>Import objects from .FOB file.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsFobImport@1\ndisplayName: 'ALOps Import FOB'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nnav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\nfilePath:                             # Path of the FOB to import. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(filePath)\nimport_action: Default                # Import action for importing FOB files. $(import_action)\nsynchronize_schema_changes: Yes       # Synchronize Schema Changes setting for importing FOB files. $(synchronize_schema_changes)\ngenerate_symbol_reference: False      # Enable Generate Symbol References. $(generate_symbol_reference)\nforce_full_generate_symbol_reference: False# Generate Symbol Reference for All Objects. $(force_full_generate_symbol_reference)\noverride_finsql_path:                 # Overrule automatic detection of FinSql with fixed value. $(override_finsql_path)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_info","title":"ALOps Info","text":"<ul> <li>Print information about ALOps and executing host.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsInfo@1\ndisplayName: 'ALOps Info'\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_license_import","title":"ALOps License Import","text":"<ul> <li>Import Business Central license (.flf).</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsLicenseImport@1\ndisplayName: 'ALOps License Import'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nnav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\nlicense_path:                         # Path of the FLF license to import. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory) or a downloadable Url. $(license_path)\nremove_license_file: True             # Remove license file after import. $(remove_license_file)\nprint_license_info: False             # Set if License is printed into the pipeline. $(print_license_info)\nlicense_scope: Default                # Set the scope for license upload. $(license_scope)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_openapi","title":"ALOps OpenAPI","text":"<ul> <li>Generate OpenAPI descriptions from Business Central API's.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsOpenAPI@1\ndisplayName: 'ALOps OpenAPI'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\napi_endpoint: https://api.businesscentral.dynamics.com/v2.0/$(azure_tenant_id)/Sandbox/api# Set API Endpoint. (protocol://host:port/serverinstance/api) $(api_endpoint)\nauthentication: oauth                 # Set authentication Method to use. Default [Windows]. $(authentication)\nazure_tenant_id:                      # Azure Tenant Id. Only required for BC SaaS $(azure_tenant_id)\nazure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\nazure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\nazure_app_client_certificate:         # Azure AD Application Client Certificate. $(azure_app_client_certificate)\nazure_app_client_certificate_password: # Azure AD Application Client Certificate Password. $(azure_app_client_certificate_password)\nusername:                             # Business Central Username. Leave empty for Service-2-Service authentication. $(username)\npassword:                             # Business Central User Password. Leave empty for Service-2-Service authentication. $(password)\npublish_artifacts: True               # Publish results as Artifacts. $(publish_artifacts)\ndiscover: True                        # Discover available API routes. $(discover)\napi_routes:                           # Specify API Routes to convert. Multiline or '|' seperated. $(api_routes)\napi_exclude_routes:                   # Specify API Routes to exclude from discovery. Multiline or '|' seperated. $(api_exclude_routes)\ninspect_paths: False                  # Print all available Paths per Route. $(inspect_paths)\napi_servers:                          # Specify available servers for OpenAPI. Multiline or '|' seperated. $(api_servers)\nexport_edmx: False                    # Export original API EDMX. $(export_edmx)\nexport_yaml: True                     # Export API in YAML format. $(export_yaml)\nexport_json: False                    # Export API in JSON format. $(export_json)\nexclude_company_paths: False          # Exclude Company Paths. $(exclude_company_paths)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_package_import","title":"ALOps Package Import","text":"<ul> <li>Import and Process RapidStart/Configuration Package</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsPackageImport@1\ndisplayName: 'ALOps Package Import'\ninputs:\nusedocker: True                       # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\ncompany_name:                         # Company name for Package import. $(company_name)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_app_publish","title":"ALOps App Publish","text":"<ul> <li>Publish Business Central extension to service tier.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsAppPublish@1\ndisplayName: 'ALOps App Publish'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\ninstallpublishedapps: True            # Install Published Applications. $(installpublishedapps)\ninstallaltesttool: False              # Install the AL TestTool for v15. $(installaltesttool)\ninstall_al_app_names: Tests-TestLibraries\nSystem Application Test\nSystem Application Test Library\nAny\nLibrary Assert\nTest Runner\n# Specify additional docker parameters. $(install_al_app_names)\nstrictappnames: False                 # Only install Specified Apps. $(strictappnames)\nnav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\nartifact_path:                        # Path for storing App Artifact. $(artifact_path)\nnav_artifact_app_filter: *.app        # Filter used for locating App file relative to $(path_to_publish). $(nav_artifact_app_filter)\nskip_verification: True               # Skip CodeSign Verification of Business Central App. $(skip_verification)\nforceinstall: False                   # Always install Apps regards of current state. $(forceinstall)\nforcesync: False                      # Sets the Sync-Mode to Force, enables pushing breaking changes. $(forcesync)\npublish_scope: Global                 # Set the scope for publishing extensions. $(publish_scope)\ntenant: default                       # Tenant to publish to when Scope is set to Tenant. $(tenant)\nbatch_publish_folder:                 # Path containing Apps to publish. $(batch_publish_folder)\npublisherazureactivedirectorytenantid: # Publisher Azure AD TenantId. $(publisherazureactivedirectorytenantid)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_repository_publish_extension","title":"ALOps Repository Publish Extension","text":"<ul> <li>Publish extension to ALOps Repository.</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsRepositoryPublish@1\ndisplayName: 'ALOps Repository Publish Extension'\ninputs:\nusedocker: False                      # Run task in Docker container. $(usedocker)\nfixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\nalops_repository_endpoint: api.businesscentral.dynamics.com# Azure API Endpoint. $(alops_repository_endpoint)\nalops_repository_username:            # Username for ALOps API Endpoint. $(alops_repository_username)\nalops_repository_password:            # Password for ALOps API Endpoint. $(alops_repository_password)\nartifact_path:                        # Path for App Artifact. $(artifact_path)\napp_artifact_filter: *.app            # Path of the App to publish. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(app_artifact_filter)\nupload_c_applications: False          # Upload Applications from Applications folder. $(upload_c_applications)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_saas_get_extensions","title":"ALOps SaaS Get Extensions","text":"<ul> <li>Replaced by Task [ALOps Extension API]</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsSaaSGetExtensions@1\ndisplayName: 'ALOps SaaS Get Extensions'\ninputs:\nazure_api_endpoint: api.businesscentral.dynamics.com# Azure API Endpoint. $(azure_api_endpoint)\nazure_api_version: v2.0               # Azure API Endpoint version. $(azure_api_version)\nazure_tenant_id:                      # Azure Tenant Id. $(azure_tenant_id)\nazure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\nazure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\nbc_impersonate_user:                  # Business Central User to impersonate. $(bc_impersonate_user)\nbc_impersonate_password:              # Business Central User Password to impersonate. $(bc_impersonate_password)\nbc_environment: sandbox               # Business Central environment to publish extension on. $(bc_environment)\nbc_companyname:                       # Business Central Company. $(bc_companyname)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv1/#alops_saas_publish_extension","title":"ALOps SaaS Publish Extension","text":"<ul> <li>Replaced by Task [ALOps Extension API]</li> <li> <p>YAML Template:</p> <pre><code>        - task: ALOpsSaaSPublishExtension@1\ndisplayName: 'ALOps SaaS Publish Extension'\ninputs:\nazure_api_endpoint: api.businesscentral.dynamics.com# Azure API Endpoint. $(azure_api_endpoint)\nazure_api_version: v2.0               # Azure API Endpoint version. $(azure_api_version)\nazure_tenant_id:                      # Azure Tenant Id. $(azure_tenant_id)\nazure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\nazure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\nbc_impersonate_user:                  # Business Central User to impersonate. $(bc_impersonate_user)\nbc_impersonate_password:              # Business Central User Password to impersonate. $(bc_impersonate_password)\nbc_environment: sandbox               # Business Central environment to publish extension on. $(bc_environment)\nbc_companyname:                       # Business Central Company. $(bc_companyname)\nartifact_path:                        # Path for App Artifact. $(artifact_path)\napp_artifact_filter: *.app            # Filter used for locating App file relative to $(path_to_publish). $(app_artifact_filter)\n</code></pre> </li> </ul>"},{"location":"Buildsteps/Buildstepsv2/","title":"Build Steps Overview","text":"<pre><code>Let's describe all the Build Steps that we have at our disposal\n</code></pre>"},{"location":"Buildsteps/Buildstepsv2/#alops_app_compiler","title":"ALOps App Compiler","text":"<ul> <li>Compile Business Central extension(s) from AL code.</li> <li>YAML Template:      <pre><code>        - task: ALOpsAppCompiler@2\ndisplayName: 'ALOps App Compiler'\ninputs:\nartifactversion:                      # BC/NAV Version, eg: 9, 10.4, NAV2016, 16.4.24524. $(artifactversion) $(artifactversion)\nartifacttype: OnPrem                  # Set Artifact Type. $(artifacttype) $(artifacttype)\nartifactcountry:                      # The Country for the Artifact. $(artifactcountry) $(artifactcountry)\nversionselect: Latest                 # The version to be selected from the Artifacts. $(versionselect) $(versionselect)\nalternativevsixurl:                   # Alternative VSIX download url. Overrules BC Artificat VSIX. 'Latest' can be specified. $(alternativevsixurl) $(alternativevsixurl)\nalsourcepath: $(System.DefaultWorkingDirectory)#  $(alsourcepath) $(alsourcepath)\nruleset:                              # Overrule the Ruleset from VSCode settings. Path relative to [alsourcepath] $(ruleset) $(ruleset)\nsuppresswarnings: KEEP                # Overrule the 'suppresswarnings' setting. $(suppresswarnings) $(suppresswarnings)\nappversiontemplate: 1.0.*.0           # Template for versioning Apps. '*' is replaced by the current Build Number. $(appversiontemplate) $(appversiontemplate)\nupdatebuildnumber: True               # Update the Build number with the current version. $(updatebuildnumber) $(updatebuildnumber)\nappfilenametemplate: %APP_PUBLISHER%_%APP_NAME%_%APP_VERSION%_%BC_TYPE%_%BC_VERSION%_%BC_COUNTRY%.app# Template for App filename. $(appfilenametemplate) $(appfilenametemplate)\nalcodeanalyzer:                       # AL Analyzer(s) used for compiling. (Example: CodeCop,UICop) $(alcodeanalyzer) $(alcodeanalyzer)\nshowmycode: Keep                      # Overrule ShowMyCode by setting other option than 'Keep'. $(showmycode) $(showmycode)\nresourceexposurepolicy_allowdebugging: Keep# Overrule allowDebugging by setting other option than 'Keep'. $(resourceexposurepolicy_allowdebugging) $(resourceexposurepolicy_allowdebugging)\nresourceexposurepolicy_allowdownloadingsource: Keep# Overrule allowDownloadingSource by setting other option than 'Keep'. $(resourceexposurepolicy_allowdownloadingsource) $(resourceexposurepolicy_allowdownloadingsource)\nresourceexposurepolicy_includesourceinsymbolfile: Keep# Overrule includeSourceInSymbolFile by setting other option than 'Keep'. $(resourceexposurepolicy_includesourceinsymbolfile) $(resourceexposurepolicy_includesourceinsymbolfile)\ninternalsvisibleto: Keep              # Remove internalsVisibleTo by setting other option than 'Keep'. $(internalsvisibleto) $(internalsvisibleto)\npreprocessorsymbols:                  # Overwrite the preprocessorSymbols in app.json, comma seperated string. Set to 'NONE' to remove. $(preprocessorsymbols) $(preprocessorsymbols)\napplicationinsightskey:               # Overwrite the ApplicationInsightsKey in app.json. Set to 'NONE' to remove InsightsKey. $(applicationinsightskey) $(applicationinsightskey)\nalcachepath: $(System.DefaultWorkingDirectory)#  $(alcachepath) $(alcachepath)\npublishartifact: True                 # Publish generated App Artifact to DevOps. $(publishartifact) $(publishartifact)\npublishxlif: False                    # Publish generated XLIF to DevOps. $(publishxlif) $(publishxlif)\nfailonwarnings: False                 # Fail task when any warning occurs. $(failonwarnings) $(failonwarnings)\nstorageaccount:                       # Non Default Storage Account. $(storageaccount) $(storageaccount)\nsastoken:                             # SAS Token used to access Storage Account. $(sastoken) $(sastoken)\nprintappmanifest: True                # Print the final app.json before compile. $(printappmanifest) $(printappmanifest)\noutputalclogs: True                   # Output ALC logs. $(outputalclogs) $(outputalclogs)\nadditionalprobingpaths:               # Add additional Assembly probing Paths. $(additionalprobingpaths) $(additionalprobingpaths)\n</code></pre></li> </ul>"},{"location":"Buildsteps/Buildstepsv2/#alops_repository_publish_extension","title":"ALOps Repository Publish Extension","text":"<ul> <li>Publish extension to ALOps Repository.</li> <li>YAML Template:      <pre><code>        - task: ALOpsRepositoryPublish@2\ndisplayName: 'ALOps Repository Publish Extension'\n</code></pre></li> </ul>"},{"location":"Buildsteps/Buildstepsv3/","title":"Build Steps Overview","text":"<pre><code>Let's describe all the Build Steps that we have at our disposal\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAdminCenterAPI_v1/","title":"ALOpsAdminCenterAPI v1","text":"<pre><code>```yaml\n    - task: ALOpsAdminCenterAPI@1\n      displayName: 'ALOps AdminCenter API'\n      inputs:\n        azure_tenant_id:                      # Azure Tenant Id. Only required for BC SaaS $(azure_tenant_id)\n        azure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\n        azure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\n        azure_app_client_certificate:         # Azure AD Application Client Certificate. $(azure_app_client_certificate)\n        azure_app_client_certificate_password: # Azure AD Application Client Certificate Password. $(azure_app_client_certificate_password)\n        username:                             # Business Central Username. Leave empty for Service-2-Service authentication. $(username)\n        password:                             # Business Central User Password. Leave empty for Service-2-Service authentication. $(password)\n        checksecondsdelay: 30                 # Seconds of delay betweel deployment status checks. $(checksecondsdelay)\n        maxtries: 20                          # Max tries for status check. $(maxtries)\n        interaction: environment_list         # Set Interaction to use. $(interaction)\n        wait_for_operation: True              # Wait for operation. $(wait_for_operation)\n        environment:                          # Source Environment. $(environment)\n        target_environment:                   # Target Environment. $(target_environment)\n        use_update_window: False              # Use update window. $(use_update_window)\n        app_id:                               # App ID. $(app_id)\n        accept_isv_eula: False                # Accept ISV Eula. $(accept_isv_eula)\n        force_dependencies: False             # Force Dependencies. $(force_dependencies)\n        confirm_delete_data: False            # Confirm Delete Data. $(confirm_delete_data)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAgentMaintenance_v1/","title":"ALOpsAgentMaintenance v1","text":"<pre><code>```yaml\n    - task: ALOpsAgentMaintenance@1\n      displayName: 'ALOps Agent Maintenance'\n      inputs:\n        removeoldtasks: False                 # Remove old ALOps tasks. $(removeoldtasks)\n        removeunusedcontainers: False         # Force docker container pruning. $(removeunusedcontainers)\n        pruneimagesdayscreated: 0             # Force docker image pruning based on creation date (x days). $(pruneimagesdayscreated)\n        pruneimagesosbased: False             # Prune images based on old OS. $(pruneimagesosbased)\n        removebcartifacts: False              # Remove BC Artifacts. $(removebcartifacts)\n        bcartifactscachefolder: C:\\bcartifacts.cache# Set non-default BC Artifact Cache folder. $(bcartifactscachefolder)\n        daysunused: 30                        # Define date-range for cleanup BC-Artifacts. $(daysunused)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppClean_v1/","title":"ALOpsAppClean v1","text":"<pre><code>```yaml\n    - task: ALOpsAppClean@1\n      displayName: 'ALOps App Cleaner'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        nav_computername: localhost           # Target Business Central Server running service tier. $(nav_computername)\n        nav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\n        sync_mode: Add                        # Mode for synchronizing Business Central extensions. $(sync_mode)\n        includemicrosoftapps: False           # Include Microsoft Apps. $(includemicrosoftapps)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppCompiler_v1/","title":"ALOpsAppCompiler v1","text":"<pre><code>```yaml\n    - task: ALOpsAppCompiler@1\n      displayName: 'ALOps App Compiler'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        targetproject: ./app.json             # Path of the project to compile. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(targetproject)\n        nav_computername:                     # Target Business Central Server running service tier. $(nav_computername)\n        nav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\n        nav_tenant: default                   # NAV Tenant used for symbols and compiling the app. $(nav_tenant)\n        nav_ports_dev: 7049                   # NAV Port used for DEV-Service. $(nav_ports_dev)\n        bc_username:                          # BC Username for ServiceTier connection. $(bc_username)\n        bc_password:                          # BC User Password for ServiceTier connection. $(bc_password)\n        al_compiler_version: 0.12.15355       # AL Compiler version used for compiling. $(al_compiler_version)\n        ruleset:                              # Overrule the Ruleset from VSCode settings. Path relative to [alsourcepath] $(ruleset)\n        suppresswarnings: KEEP                # Overrule the 'suppresswarnings' setting. $(suppresswarnings)\n        al_analyzer:                          # AL Analyzer(s) used for compiling. (Example: CodeCop,UICop) $(al_analyzer)\n        ignorepragmas:                        # Report Suppressed Diagnostics: diagnostics suppressed in source code should be emitted. $(ignorepragmas)\n        nav_app_version: 1.0.*.0              # Template for versioning NAV-Apps. '*' is replaced by the current Build Number. $(nav_app_version)\n        vsix_download_path:                   # Alternative VSIX download url. 'Latest' can be specified. $(vsix_download_path)\n        use_ssl: False                        # Use SSL for Business Central connections. $(use_ssl)\n        download_test_symbols: False          # Download Test Symbols explicitly (without Test-Version reference in App.json). $(download_test_symbols)\n        usecompression: True                  # Compress Source-Folder for transfer to docker container. $(usecompression)\n        publish_artifact: True                # Publish generated App Artifact to DevOps. $(publish_artifact)\n        publishxlif: False                    # Publish generated XLIF to DevOps. $(publishxlif)\n        failed_on_warnings: False             # Fail task when any warning occurs. $(failed_on_warnings)\n        app_file_suffix:                      # Set a suffix tag on the compiled App filename. $(app_file_suffix)\n        updatebuildnumber: True               # Update the Build number with the current version. $(updatebuildnumber)\n        setup_working_folder: False           # Copy working folder to Docker container. $(setup_working_folder)\n        showmycode: Keep                      # Overrule ShowMyCode by setting other option than 'Keep'. $(showmycode)\n        resourceexposurepolicy_allowdebugging: Keep# Overrule allowDebugging by setting other option than 'Keep'. $(resourceexposurepolicy_allowdebugging)\n        resourceexposurepolicy_allowdownloadingsource: Keep# Overrule allowDownloadingSource by setting other option than 'Keep'. $(resourceexposurepolicy_allowdownloadingsource)\n        resourceexposurepolicy_includesourceinsymbolfile: Keep# Overrule includeSourceInSymbolFile by setting other option than 'Keep'. $(resourceexposurepolicy_includesourceinsymbolfile)\n        internalsvisibleto: Keep              # Remove internalsVisibleTo by setting other option than 'Keep'. $(internalsvisibleto)\n        preprocessorsymbols:                  # Overwrite the preprocessorSymbols in app.json, comma seperated string. Set to 'NONE' to remove. $(preprocessorsymbols)\n        applicationinsightskey:               # Overwrite the ApplicationInsightsKey in app.json. Set to 'NONE' to remove InsightsKey. $(applicationinsightskey)\n        printappmanifest: True                # Print the final app.json before compile. $(printappmanifest)\n        output_alc_logs: True                 # Output ALC logs. $(output_alc_logs)\n        additionalprobingpaths:               # Add additional Assembly probing Paths. $(additionalprobingpaths)\n        enable_external_rulesets: False       # Enable External Rulesets. $(enable_external_rulesets)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppCopy_v1/","title":"ALOpsAppCopy v1","text":"<pre><code>```yaml\n    - task: ALOpsAppCopy@1\n      displayName: 'ALOps App Copy'\n      inputs:\n        nav_computername: localhost           # Target Business Central Server running service tier. $(nav_computername)\n        nav_serverinstance_source: BC140      # Source Business Central service tier to copy from. $(nav_serverinstance_source)\n        nav_serverinstance_target: BC140      # Target Business Central service tier to copy to. $(nav_serverinstance_target)\n        nav_app_storage:                      # Path used for temporary extension storage. $(nav_app_storage)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppLicenseCheck_v1/","title":"ALOpsAppLicenseCheck v1","text":"<pre><code>```yaml\n    - task: ALOpsAppLicenseCheck@1\n      displayName: 'ALOps App License Check'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        licensefile:                          # Set the BC License File. Path or Url. $(licensefile)\n        artifact_path: $(System.ArtifactsDirectory)# Path for App Artifact. $(artifact_path)\n        artifact_filter: *.app                # Filter used for locating App file relative to $(artifact_path). $(artifact_filter)\n        artifact_include:                     # Include-Filter used for locating App file relative to $(artifact_path). $(artifact_include)\n        artifact_exclude:                     # Exclude-Filter used for locating App file relative to $(artifact_path). $(artifact_exclude)\n        exclude_ranges:                       # Exclude-Ranges from LicenseCheck (Buffer / Tempory tables). Format: 60000..60099,70000..70100 $(exclude_ranges)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppPublish_v1/","title":"ALOpsAppPublish v1","text":"<pre><code>```yaml\n    - task: ALOpsAppPublish@1\n      displayName: 'ALOps App Publish'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        installpublishedapps: True            # Install Published Applications. $(installpublishedapps)\n        installaltesttool: False              # Install the AL TestTool for v15. $(installaltesttool)\n        install_al_app_names: Tests-TestLibraries\nSystem Application Test\nSystem Application Test Library\nAny\nLibrary Assert\nTest Runner\n# Specify additional docker parameters. $(install_al_app_names)\n        strictappnames: False                 # Only install Specified Apps. $(strictappnames)\n        nav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\n        artifact_path:                        # Path for storing App Artifact. $(artifact_path)\n        nav_artifact_app_filter: *.app        # Filter used for locating App file relative to $(path_to_publish). $(nav_artifact_app_filter)\n        skip_verification: True               # Skip CodeSign Verification of Business Central App. $(skip_verification)\n        forceinstall: False                   # Always install Apps regards of current state. $(forceinstall)\n        forcesync: False                      # Sets the Sync-Mode to Force, enables pushing breaking changes. $(forcesync)\n        publish_scope: Global                 # Set the scope for publishing extensions. $(publish_scope)\n        tenant: default                       # Tenant to publish to when Scope is set to Tenant. $(tenant)\n        batch_publish_folder:                 # Path containing Apps to publish. $(batch_publish_folder)\n        publisherazureactivedirectorytenantid: # Publisher Azure AD TenantId. $(publisherazureactivedirectorytenantid)\n        blocksymbolsonly: False               # Check App, block if SymbolsOnly App. $(blocksymbolsonly)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppRuntimePackage_v1/","title":"ALOpsAppRuntimePackage v1","text":"<pre><code>```yaml\n    - task: ALOpsAppRuntimePackage@1\n      displayName: 'ALOps App Runtime Package'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        nav_serverinstance: BC140             # Specifies the name of a Business Central Server instance. $(nav_serverinstance)\n        nav_tenant: default                   # Specifies the ID of a specific tenant that you want to act on, such as Tenant1. $(nav_tenant)\n        targetproject: ./app.json             # Path of the project to export as RuntimePackage. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(targetproject)\n        showmycode: False                     # Overwrites the ShowMyCode value in the manifest. $(showmycode)\n        publish_artifact: True                # Publish generated Runtime-App Artifact to DevOps. $(publish_artifact)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppSignVerify_v1/","title":"ALOpsAppSignVerify v1","text":"<pre><code>```yaml\n    - task: ALOpsAppSignVerify@1\n      displayName: 'ALOps App Sign Verify'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        artifact_path:                        # Path for App Artifact. $(artifact_path)\n        nav_artifact_app_filter: *.app        # Path of the App to verify. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(nav_artifact_app_filter)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppSign_v1/","title":"ALOpsAppSign v1","text":"<pre><code>```yaml\n    - task: ALOpsAppSign@1\n      displayName: 'ALOps App Sign'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        batchsigncompiledapps: False          # Batch Sign Apps taged by ALOpsAppCompile task. $(batchsigncompiledapps)\n        artifact_path:                        # Path for storing App Artifact. $(artifact_path)\n        nav_artifact_app_filter: *.app        # Path of the App to Codesign. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(nav_artifact_app_filter)\n        pfx_path:                             # Path or Url of the PFX file. $(pfx_path)\n        timestamp_uri:                        # Uri of the timestamp service used during signing. $(timestamp_uri)\n        publish_artifact: True                # Publish generated App Artifact to DevOps. $(publish_artifact)\n        pfx_password:                         # Password for the PFX File. Recommended to use Azure-KeyVault secrets. $(pfx_password)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppSource_v1/","title":"ALOpsAppSource v1","text":"<pre><code>```yaml\n    - task: ALOpsAppSource@1\n      displayName: 'ALOps AppSource'\n      inputs:\n        azure_tenant_id:                      # Azure Tenant Id. Only required for BC SaaS $(azure_tenant_id)\n        azure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\n        azure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppTest_v1/","title":"ALOpsAppTest v1","text":"<pre><code>```yaml\n    - task: ALOpsAppTest@1\n      displayName: 'ALOps App Test'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        nav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\n        tenant: default                       # Business Central Tenant. $(tenant)\n        companyname:                          # Business Central Company. $(companyname)\n        profile:                              # Business Central Profile. $(profile)\n        bc_username:                          # BC Username for ServiceTier connection. $(bc_username)\n        bc_password:                          # BC User Password for ServiceTier connection. $(bc_password)\n        bc_authentication: NavUserPassword    # BC Authentication type of the ServiceTier. $(bc_authentication)\n        bc_webclient_url:                     # BC WebClient Endpoint. $(bc_webclient_url)\n        testfilter:                           # Filter codeunits to include in Test-Suite. $(testfilter)\n        disabledtests:                        # Disabled Tests File. $(disabledtests)\n        show_available_tests: True            # Show all available tests. $(show_available_tests)\n        import_testtoolkit: True              # Import TestToolKit FOB. $(import_testtoolkit)\n        import_action: Overwrite              # Import Action for importing Test-Suite FOB files. $(import_action)\n        testpage: 130409                      # Set the PageId used for testing. $(testpage)\n        testsuite: DEFAULT                    # Set target Test Suite to activate. $(testsuite)\n        extensionid:                          # Set Extension ID. $(extensionid)\n        installaltesttool: False              # Install the AL TestTool for v15. $(installaltesttool)\n        failed_test_action: Warning           # Action to take when a Test failed. $(failed_test_action)\n        override_finsql_path:                 # Overrule automatic detection of FinSql with fixed value. $(override_finsql_path)\n        resultfilename: TestResults.xml       # Set filename for the Result XML. $(resultfilename)\n        testrunnercodeunitid:                 # Set the Codeunit Id for the test-runner to use. $(testrunnercodeunitid)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsAppValidation_v1/","title":"ALOpsAppValidation v1","text":"<pre><code>```yaml\n    - task: ALOpsAppValidation@1\n      displayName: 'ALOps App Validation'\n      inputs:\n        license_path:                         # Path of the FLF license to import. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory) or a downloadable Url. $(license_path)\n        countries:                            # Comma seperated array of countries to validate. When blank SupportedCountries value from AppSourceCop.json is used. $(countries)\n        affixes:                              # Comma seperated array of affixes. $(affixes)\n        artifact_path: $(System.ArtifactsDirectory)# Path for App Artifact(s). $(artifact_path)\n        artifact_filter: *.app                # Filter used for locating App file relative to $(artifact_path). $(artifact_filter)\n        installapps_path: $(System.ArtifactsDirectory)# Path for InstallApps Artifact(s). $(installapps_path)\n        installapps_filter: *.app             # Filter used for locating App file relative to $(installapps_path). $(installapps_filter)\n        previousapps_path: $(System.ArtifactsDirectory)# Path for PreviousApps Artifact(s). $(previousapps_path)\n        previousapps_filter: *.app            # Filter used for locating App file relative to $(previousapps_path). $(previousapps_filter)\n        memory: 8G                            # Set maximum memory for Container. $(memory)\n        validateversion:                      # Full or partial version number. If specified, apps will also be validated against this version. $(validateversion)\n        validatecurrent: False                # Validate against current version of Business Central. $(validatecurrent)\n        validatenextminor: False              # Validate against Next Minor version of Business Central. $(validatenextminor)\n        validatenextmajor: False              # Validate against Next Major version of Business Central. $(validatenextmajor)\n        sastoken:                             # SAS Token used to access Storage Account. $(sastoken)\n        skipverification: False               #  $(skipverification)\n        skipappsourcecop: False               #  $(skipappsourcecop)\n        includewarnings: False                # Include this switch if you want to include Warnings. $(includewarnings)\n        failonerror: True                     # Include this switch if you want to fail on the first error instead of returning all errors to the caller. $(failonerror)\n        containername: bcserver               # Only required when running multiple DevOps Agents on the same server. (Not recommended) $(containername)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsDockerCreate_v1/","title":"ALOpsDockerCreate v1","text":"<pre><code>```yaml\n    - task: ALOpsDockerCreate@1\n      displayName: 'ALOps Docker Create'\n      inputs:\n        artifactspecification: Specific       # Set Artifact resolve method. $(artifactspecification)\n        artifactversion:                      # BC/NAV Version, eg: 9, 10.4, NAV2016, 16.4.24524. $(artifactversion)\n        artifacttype: OnPrem                  # Set Artifact Type. $(artifacttype)\n        artifactcountry:                      # The Country for the Artifact. $(artifactcountry)\n        versionselect: Latest                 # The version to be selected from the Artifacts. $(versionselect)\n        artifacthint:                         # . $(artifacthint)\n        multitenant: False                    # Create a Multi-Tenant image. $(multitenant)\n        memory: 8G                            # Set maximum memory for Container. $(memory)\n        imageprefix: myImage                  # New image name, tag defined by $(imagenametemplate). $(imageprefix)\n        dockerregistry:                       # Docker registry Pull/Push, example: 'bcinsider.azurecr.io', or 'repo.mydomain.com' $(dockerregistry)\n        dockerusername:                       # Docker login username. $(dockerusername)\n        dockerpassword:                       # Docker login password. $(dockerpassword)\n        storageaccount:                       # Non Default Storage Account. $(storageaccount)\n        sastoken:                             # SAS Token used to access Storage Account. $(sastoken)\n        forcecreateimage: False               # Forces image creation, skipping Pull image. $(forcecreateimage)\n        myscripts:                            # Specify myScripts to be added to the image. $(myscripts)\n        imagenametemplate: %IMAGE_PREFIX%:%ARTIFACT_TYPE%-%ARTIFACT_VERSION%-%ARTIFACT_COUNTRY%-%OS_VERSION%-%OS_LTSC%# Template for defining Image names or using a fixed name $(imagenametemplate)\n        licensefile:                          # BC License File to be included in the Image $(licensefile)\n        includetesttoolkit: False             # Included the TestToolkit in created image. $(includetesttoolkit)\n        includetestlibrariesonly: False       # Included only the Test-Libraries in created image. $(includetestlibrariesonly)\n        includetestframeworkonly: False       # Included only the Test-Framework in created image. $(includetestframeworkonly)\n        includeperformancetoolkit: False      # Include Performance-Toolkit in created image. $(includeperformancetoolkit)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsDockerExec_v1/","title":"ALOpsDockerExec v1","text":"<pre><code>```yaml\n    - task: ALOpsDockerExec@1\n      displayName: 'ALOps Docker Execute'\n      inputs:\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        scriptsource: InLine                  # Set type for requiring the script. $(scriptsource)\n        script_location:                      # Location of the script to fetch. $(script_location)\n        inline_script: # Write your powershell commands here.\nWrite-Host \"Hello World\"\n# Inline Powershell Script. $(inline_script)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsDockerRemove_v1/","title":"ALOpsDockerRemove v1","text":"<pre><code>```yaml\n    - task: ALOpsDockerRemove@1\n      displayName: 'ALOps Docker Remove'\n      inputs:\n        usedocker: True                       # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        print_logs: True                      # Print all container logs before remove. $(print_logs)\n        createeventlogbackup: disabled        # Create EventLog Backup from Container. $(createeventlogbackup)\n        createsqlbackup: disabled             # Create SQL Backup from Container Database. $(createsqlbackup)\n        publishsqlbackup: True                # Published the SQL Backup as Build-Artifact. $(publishsqlbackup)\n        sqlcompression: False                 # Create Compressed SQL Backup (does not work on SQL-Express). $(sqlcompression)\n        zipsqlbackup: True                    # ZIP the SQL Backup. $(zipsqlbackup)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsDockerStart_v1/","title":"ALOpsDockerStart v1","text":"<pre><code>```yaml\n    - task: ALOpsDockerStart@1\n      displayName: 'ALOps Docker Start'\n      inputs:\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        ignore_no_container_warning: False    # Do not trigger warning when container with [fixed_tag] is not found. $(ignore_no_container_warning)\n        docker_image: $(ALOPS_BC_IMAGE)       # Business Central docker Image to Start. $(docker_image)\n        accept_image_eula: True               # Accept Eula of docker image. $(accept_image_eula)\n        accept_image_outdated: True           # Accept Outdated image. $(accept_image_outdated)\n        enable_symbol_loading: False          # Enable Symbol Loading. $(enable_symbol_loading)\n        enable_api_services: False            # Enable API Services. $(enable_api_services)\n        multitenant: False                    # Create a Multi-Tenant container. $(multitenant)\n        docker_pull: True                     # Force Pull docker image. $(docker_pull)\n        dockerauthentication: None            # Set authentication Method to use. $(dockerauthentication)\n        docker_login:                         # Select the generic login to use for docker. If needed, click on 'manage', and add a new Service Endpoint of type 'Generic' $(docker_login)\n        docker_username:                      # Docker login username. $(docker_username)\n        docker_password:                      # Docker login password. $(docker_password)\n        docker_registry:                      # Docker registry for login, example: 'bcinsider.azurecr.io' $(docker_registry)\n        memory_gb: -1                         # Set maximum memory for container in GB. $(memory_gb)\n        container_restart: no                 # Set docker container restart preference. $(container_restart)\n        licensefile:                          # Set the BC License File. Path or Url. $(licensefile)\n        docker_parameters:                    # Specify additional docker parameters. $(docker_parameters)\n        sql_server:                           # External SQL Server. $(sql_server)\n        sql_server_instance:                  # External SQL Server Instance. $(sql_server_instance)\n        sql_database:                         # External SQL Database. $(sql_database)\n        sql_database_user:                    # External SQL Database User. $(sql_database_user)\n        sql_database_user_password:           # External SQL Database Password. $(sql_database_user_password)\n        sql_backup_file:                      # Restore BAK file on startup. $(sql_backup_file)\n        encryption_key:                       # Encryption key for Service Tier. $(encryption_key)\n        taskscheduler: Keep                   # Overrule EnableTaskScheduler by setting other option than 'Keep'. $(taskscheduler)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsDockerWait_v1/","title":"ALOpsDockerWait v1","text":"<pre><code>```yaml\n    - task: ALOpsDockerWait@1\n      displayName: 'ALOps Docker Wait'\n      inputs:\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        search_string: Ready for connections! # String to match in Docker Logs and return. $(search_string)\n        warning_string:                       # Show as Warning when the container logs contain the warning string. $(warning_string)\n        error_string:                         # Throw error when the container logs contain the error string. $(error_string)\n        setup_working_folder: True            # Copy working folder to Docker container. $(setup_working_folder)\n        usecompression: True                  # Compress Source-Folder for transfer to docker container. $(usecompression)\n        printlogs: True                       # Print all container logs. $(printlogs)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsExtensionAPI_v1/","title":"ALOpsExtensionAPI v1","text":"<pre><code>```yaml\n    - task: ALOpsExtensionAPI@1\n      displayName: 'ALOps Extension API'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        interaction: get                      # Set Interaction Method to use. (Get/Publish/Batch Publish). $(interaction)\n        api_endpoint: https://api.businesscentral.dynamics.com/v2.0/$(azure_tenant_id)/Sandbox/api# Set API Endpoint. (protocol://host:port/serverinstance/api) $(api_endpoint)\n        dev_endpoint:                         # Set DEV Endpoint. (protocol://host:port/serverinstance/dev) $(dev_endpoint)\n        dev_schemeupdatemode: synchronize     # Set Schema Update Mode to use with DEVPort deploy. (synchronize/recreate/forcesync) $(dev_schemeupdatemode)\n        apiversion: v1.0                      # Version of the API to use (beta / v1.0 / v2.0) $(apiversion)\n        authentication: oauth                 # Set authentication Method to use. Default [Windows]. $(authentication)\n        azure_tenant_id:                      # Azure Tenant Id. Only required for BC SaaS $(azure_tenant_id)\n        azure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\n        azure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\n        azure_app_client_certificate:         # Azure AD Application Client Certificate. $(azure_app_client_certificate)\n        azure_app_client_certificate_password: # Azure AD Application Client Certificate Password. $(azure_app_client_certificate_password)\n        username:                             # Business Central Username. Leave empty for Service-2-Service authentication. $(username)\n        password:                             # Business Central User Password. Leave empty for Service-2-Service authentication. $(password)\n        bccompany:                            # Business Central Company (Id or Name). $(bccompany)\n        artifact_path: $(System.ArtifactsDirectory)# Path for App Artifact. $(artifact_path)\n        artifact_filter: *.app                # Filter used for locating App file relative to $(path_to_publish). $(artifact_filter)\n        showdeploymentstatus: True            # Show Extension Deployment Status. $(showdeploymentstatus)\n        checksecondsdelay: 30                 # Seconds of delay betweel deployment status checks. $(checksecondsdelay)\n        maxtries: 20                          # Max tries for status check. $(maxtries)\n        replacepackageid: False               # Force a new PackageID for each deployment. $(replacepackageid)\n        blocksymbolsonly: False               # Check App, block if SymbolsOnly App. $(blocksymbolsonly)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsFobImport_v1/","title":"ALOpsFobImport v1","text":"<pre><code>```yaml\n    - task: ALOpsFobImport@1\n      displayName: 'ALOps Import FOB'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        nav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\n        filePath:                             # Path of the FOB to import. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(filePath)\n        import_action: Default                # Import action for importing FOB files. $(import_action)\n        synchronize_schema_changes: Yes       # Synchronize Schema Changes setting for importing FOB files. $(synchronize_schema_changes)\n        generate_symbol_reference: False      # Enable Generate Symbol References. $(generate_symbol_reference)\n        force_full_generate_symbol_reference: False# Generate Symbol Reference for All Objects. $(force_full_generate_symbol_reference)\n        override_finsql_path:                 # Overrule automatic detection of FinSql with fixed value. $(override_finsql_path)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsInfo_v1/","title":"ALOpsInfo v1","text":"<pre><code>```yaml\n    - task: ALOpsInfo@1\n      displayName: 'ALOps Info'\n      inputs:\n        scanforsymbolonlyapps: Disabled       # Scan for SymbolOnly Apps. $(scanforsymbolonlyapps)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsLicenseImport_v1/","title":"ALOpsLicenseImport v1","text":"<pre><code>```yaml\n    - task: ALOpsLicenseImport@1\n      displayName: 'ALOps License Import'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        nav_serverinstance: BC140             # Business Central Server Instance Name. $(nav_serverinstance)\n        license_path:                         # Path of the FLF license to import. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory) or a downloadable Url. $(license_path)\n        remove_license_file: True             # Remove license file after import. $(remove_license_file)\n        print_license_info: False             # Set if License is printed into the pipeline. $(print_license_info)\n        license_scope: Default                # Set the scope for license upload. $(license_scope)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsOpenAPI_v1/","title":"ALOpsOpenAPI v1","text":"<pre><code>```yaml\n    - task: ALOpsOpenAPI@1\n      displayName: 'ALOps OpenAPI'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        api_endpoint: https://api.businesscentral.dynamics.com/v2.0/$(azure_tenant_id)/Sandbox/api# Set API Endpoint. (protocol://host:port/serverinstance/api) $(api_endpoint)\n        authentication: oauth                 # Set authentication Method to use. Default [Windows]. $(authentication)\n        azure_tenant_id:                      # Azure Tenant Id. Only required for BC SaaS $(azure_tenant_id)\n        azure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\n        azure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\n        azure_app_client_certificate:         # Azure AD Application Client Certificate. $(azure_app_client_certificate)\n        azure_app_client_certificate_password: # Azure AD Application Client Certificate Password. $(azure_app_client_certificate_password)\n        username:                             # Business Central Username. Leave empty for Service-2-Service authentication. $(username)\n        password:                             # Business Central User Password. Leave empty for Service-2-Service authentication. $(password)\n        publish_artifacts: True               # Publish results as Artifacts. $(publish_artifacts)\n        discover: True                        # Discover available API routes. $(discover)\n        api_routes:                           # Specify API Routes to convert. Multiline or '|' seperated. $(api_routes)\n        api_exclude_routes:                   # Specify API Routes to exclude from discovery. Multiline or '|' seperated. $(api_exclude_routes)\n        inspect_paths: False                  # Print all available Paths per Route. $(inspect_paths)\n        api_servers:                          # Specify available servers for OpenAPI. Multiline or '|' seperated. $(api_servers)\n        export_edmx: False                    # Export original API EDMX. $(export_edmx)\n        export_yaml: True                     # Export API in YAML format. $(export_yaml)\n        export_json: False                    # Export API in JSON format. $(export_json)\n        exclude_company_paths: False          # Exclude Company Paths. $(exclude_company_paths)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsPackageImport_v1/","title":"ALOpsPackageImport v1","text":"<pre><code>```yaml\n    - task: ALOpsPackageImport@1\n      displayName: 'ALOps Package Import'\n      inputs:\n        usedocker: True                       # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        company_name:                         # Company name for Package import. $(company_name)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsRepositoryPublish_v1/","title":"ALOpsRepositoryPublish v1","text":"<pre><code>```yaml\n    - task: ALOpsRepositoryPublish@1\n      displayName: 'ALOps Repository Publish Extension'\n      inputs:\n        usedocker: False                      # Run task in Docker container. $(usedocker)\n        fixed_tag:                            # Allows recycling of docker containers. $(fixed_tag)\n        alops_repository_endpoint: api.businesscentral.dynamics.com# Azure API Endpoint. $(alops_repository_endpoint)\n        alops_repository_username:            # Username for ALOps API Endpoint. $(alops_repository_username)\n        alops_repository_password:            # Password for ALOps API Endpoint. $(alops_repository_password)\n        artifact_path:                        # Path for App Artifact. $(artifact_path)\n        app_artifact_filter: *.app            # Path of the App to publish. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory). $(app_artifact_filter)\n        upload_c_applications: False          # Upload Applications from Applications folder. $(upload_c_applications)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsSaaSGetExtensions_v1/","title":"ALOpsSaaSGetExtensions v1","text":"<pre><code>```yaml\n    - task: ALOpsSaaSGetExtensions@1\n      displayName: 'ALOps SaaS Get Extensions'\n      inputs:\n        azure_api_endpoint: api.businesscentral.dynamics.com# Azure API Endpoint. $(azure_api_endpoint)\n        azure_api_version: v2.0               # Azure API Endpoint version. $(azure_api_version)\n        azure_tenant_id:                      # Azure Tenant Id. $(azure_tenant_id)\n        azure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\n        azure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\n        bc_impersonate_user:                  # Business Central User to impersonate. $(bc_impersonate_user)\n        bc_impersonate_password:              # Business Central User Password to impersonate. $(bc_impersonate_password)\n        bc_environment: sandbox               # Business Central environment to publish extension on. $(bc_environment)\n        bc_companyname:                       # Business Central Company. $(bc_companyname)\n```\n</code></pre>"},{"location":"Buildsteps/v1/ALOpsSaaSPublishExtension_v1/","title":"ALOpsSaaSPublishExtension v1","text":"<pre><code>```yaml\n    - task: ALOpsSaaSPublishExtension@1\n      displayName: 'ALOps SaaS Publish Extension'\n      inputs:\n        azure_api_endpoint: api.businesscentral.dynamics.com# Azure API Endpoint. $(azure_api_endpoint)\n        azure_api_version: v2.0               # Azure API Endpoint version. $(azure_api_version)\n        azure_tenant_id:                      # Azure Tenant Id. $(azure_tenant_id)\n        azure_app_client_id:                  # Azure AD Application Client Id. $(azure_app_client_id)\n        azure_app_client_secret:              # Azure AD Application Client Secret. $(azure_app_client_secret)\n        bc_impersonate_user:                  # Business Central User to impersonate. $(bc_impersonate_user)\n        bc_impersonate_password:              # Business Central User Password to impersonate. $(bc_impersonate_password)\n        bc_environment: sandbox               # Business Central environment to publish extension on. $(bc_environment)\n        bc_companyname:                       # Business Central Company. $(bc_companyname)\n        artifact_path:                        # Path for App Artifact. $(artifact_path)\n        app_artifact_filter: *.app            # Filter used for locating App file relative to $(path_to_publish). $(app_artifact_filter)\n```\n</code></pre>"},{"location":"Buildsteps/v2/ALOpsAppCompiler_v2/","title":"ALOpsAppCompiler v2","text":"<pre><code>```yaml\n    - task: ALOpsAppCompiler@2\n      displayName: 'ALOps App Compiler'\n      inputs:\n        artifactversion:                      # BC/NAV Version, eg: 9, 10.4, NAV2016, 16.4.24524. $(artifactversion) $(artifactversion)\n        artifacttype: OnPrem                  # Set Artifact Type. $(artifacttype) $(artifacttype)\n        artifactcountry:                      # The Country for the Artifact. $(artifactcountry) $(artifactcountry)\n        versionselect: Latest                 # The version to be selected from the Artifacts. $(versionselect) $(versionselect)\n        alternativevsixurl:                   # Alternative VSIX download url. Overrules BC Artificat VSIX. 'Latest' can be specified. $(alternativevsixurl) $(alternativevsixurl)\n        alsourcepath: $(System.DefaultWorkingDirectory)#  $(alsourcepath) $(alsourcepath)\n        ruleset:                              # Overrule the Ruleset from VSCode settings. Path relative to [alsourcepath] $(ruleset) $(ruleset)\n        suppresswarnings: KEEP                # Overrule the 'suppresswarnings' setting. $(suppresswarnings) $(suppresswarnings)\n        appversiontemplate: 1.0.*.0           # Template for versioning Apps. '*' is replaced by the current Build Number. $(appversiontemplate) $(appversiontemplate)\n        updatebuildnumber: True               # Update the Build number with the current version. $(updatebuildnumber) $(updatebuildnumber)\n        appfilenametemplate: %APP_PUBLISHER%_%APP_NAME%_%APP_VERSION%_%BC_TYPE%_%BC_VERSION%_%BC_COUNTRY%.app# Template for App filename. $(appfilenametemplate) $(appfilenametemplate)\n        alcodeanalyzer:                       # AL Analyzer(s) used for compiling. (Example: CodeCop,UICop) $(alcodeanalyzer) $(alcodeanalyzer)\n        ignorepragmas:                        # Report Suppressed Diagnostics: diagnostics suppressed in source code should be emitted. $(ignorepragmas) $(ignorepragmas)\n        enable_external_rulesets: False       # Enable External Rulesets. $(enable_external_rulesets) $(enable_external_rulesets)\n        showmycode: Keep                      # Overrule ShowMyCode by setting other option than 'Keep'. $(showmycode) $(showmycode)\n        resourceexposurepolicy_allowdebugging: Keep# Overrule allowDebugging by setting other option than 'Keep'. $(resourceexposurepolicy_allowdebugging) $(resourceexposurepolicy_allowdebugging)\n        resourceexposurepolicy_allowdownloadingsource: Keep# Overrule allowDownloadingSource by setting other option than 'Keep'. $(resourceexposurepolicy_allowdownloadingsource) $(resourceexposurepolicy_allowdownloadingsource)\n        resourceexposurepolicy_includesourceinsymbolfile: Keep# Overrule includeSourceInSymbolFile by setting other option than 'Keep'. $(resourceexposurepolicy_includesourceinsymbolfile) $(resourceexposurepolicy_includesourceinsymbolfile)\n        internalsvisibleto: Keep              # Remove internalsVisibleTo by setting other option than 'Keep'. $(internalsvisibleto) $(internalsvisibleto)\n        preprocessorsymbols:                  # Overwrite the preprocessorSymbols in app.json, comma seperated string. Set to 'NONE' to remove. $(preprocessorsymbols) $(preprocessorsymbols)\n        applicationinsightskey:               # Overwrite the ApplicationInsightsKey in app.json. Set to 'NONE' to remove InsightsKey. $(applicationinsightskey) $(applicationinsightskey)\n        alcachepath: $(System.DefaultWorkingDirectory)#  $(alcachepath) $(alcachepath)\n        publishartifact: True                 # Publish generated App Artifact to DevOps. $(publishartifact) $(publishartifact)\n        publishxlif: False                    # Publish generated XLIF to DevOps. $(publishxlif) $(publishxlif)\n        failonwarnings: False                 # Fail task when any warning occurs. $(failonwarnings) $(failonwarnings)\n        storageaccount:                       # Non Default Storage Account. $(storageaccount) $(storageaccount)\n        sastoken:                             # SAS Token used to access Storage Account. $(sastoken) $(sastoken)\n        printappmanifest: True                # Print the final app.json before compile. $(printappmanifest) $(printappmanifest)\n        outputalclogs: True                   # Output ALC logs. $(outputalclogs) $(outputalclogs)\n        additionalprobingpaths:               # Add additional Assembly probing Paths. $(additionalprobingpaths) $(additionalprobingpaths)\n```\n</code></pre>"},{"location":"Buildsteps/v2/ALOpsRepositoryPublish_v2/","title":"ALOpsRepositoryPublish v2","text":"<pre><code>```yaml\n    - task: ALOpsRepositoryPublish@2\n      displayName: 'ALOps Repository Publish Extension'\n```\n</code></pre>"},{"location":"Help/QnA/","title":"Q &amp; A","text":""},{"location":"Help/QnA/#do_i_need_a_license_to_run_alops","title":"Do I need a license to run ALOps?","text":"<p>Yes and No.  It depends on the situation: - No - if you run anything for community, which means, if you want to run pipelines on public repositories, the use of ALOps is completely free - Yes - For any private repository, you need to pay for ALOps.  </p> <p>More information on ALOps pricing, you can find here.</p>"},{"location":"Help/QnA/#do_i_need_to_use_docker","title":"Do I need to use Docker","text":"<p>No - all ALOps steps can run without Docker as well.  Though, we strongly recommend to use Docker, which will give you a much more stable build-experience.</p>"},{"location":"Help/Troubleshooting/","title":"Troubleshooting","text":"<p>Let's list some common problems and their solutions:</p>"},{"location":"Help/Troubleshooting/#unit_tests_seem_to_fail_for_some_odd_reason","title":"Unit tests seem to fail for some odd reason","text":"<p>If you run unit tests - you might encounter weird problems, like:</p> <p></p> <p>In many cases, the issues are caused because of not enough memory for the docker container that is used to run the tests.  Just assign more memory when you start the Docker container, like in this example: <pre><code>- task: ALOpsDockerStart@1\ninputs:\ndocker_image: $(dockerimage)\ndocker_pull: true\nmemory_gb: 8\n</code></pre></p>"},{"location":"Help/Troubleshooting/#failed_publishing_test_results_to_devops","title":"Failed publishing test results to DevOps","text":"<p>Publishing the test results is a default DevOps step, but for publishing AL Test Results (XUnit), it is important to use at least version 2 of the step (indicated in yml with \"@2\" at the name of the step).  Like: <pre><code>- task: PublishTestResults@2\ndisplayName: 'Publish Test Results **/TestResults.xml'\ninputs:\ntestResultsFormat: XUnit\ntestResultsFiles: '**/TestResults.xml'\ntestRunTitle: 'BC Test Results: $(Build.BuildId)'\n</code></pre></p>"},{"location":"Help/Troubleshooting/#i_have_unclear_problems_with_compiling_my_app_or_imorting_a_fob","title":"I have unclear problems with compiling my app or imorting a fob","text":"<p>There are a lot of problems caused by a Windows update (Feb 2020) that makes Docker fail to run 32-bit application like finsql.exe or alc.exe.  Familiar errors are: - <code>AL Compiler Exit Code: -1073741502</code> - <code>Exception calling \"GetResponse\" with \"0\" argument(s)</code> - <code>##[error]!</code></p> <p>Most of these problems are solved by setting up the containers with Hyper-V isolation: <pre><code>- task: ALOpsDockerStart@1\ninputs:\ndocker_image: 'mcr.microsoft.com/businesscentral/onprem:de'\ndocker_pull: true\nmemory_gb: '8'\ndocker_parameters: '--isolation=hyperv'\n</code></pre> It's important to understand that this problem is caused by the combination of the Docker image and the state of Windows Server of your build agent.</p>"},{"location":"Setup/SettingUpYourFirstBuild/","title":"Setting Up Your FirstBuild","text":"<p>The intention of this document is to help you build your first build pipeline with ALOps.  This means we will make ALOps available to your DevOps, and import one of the template repos to start building an app for ALOps, including a build pipeline in DevOps.</p>"},{"location":"Setup/SettingUpYourFirstBuild/#download_alops_to_devops","title":"Download ALOps to DevOps","text":"<p>You can simply download ALOps to your DevOps environment by: - Open DevOps and log in with your account - Open the organization you want to work in - On the right top corner, click the right basket to browse the marketplace. </p> <p></p> <ul> <li>Search for \"ALOps\" and open that page</li> <li>Click \"Get\"</li> </ul> <p></p> <ul> <li>select your collection/organization and click \"Install\"</li> </ul> <p></p> <p>The tool is being downloaded to your marketplace.  If you go to \"Manage Extensions\", you'll find it in your \"Installed\" Extensions.</p> <p></p> <p>You are now good to go to add steps from ALOps in your build pipelines!</p>"},{"location":"Setup/SettingUpYourFirstBuild/#create_a_new_repository_based_on_one_of_the_templates_from_alops","title":"Create a new repository, based on one of the templates from ALOps","text":"<p>ALOps provides templates for AL Apps in this public project.  We will import the code from one of the repos into our own repo.  This can simply be done by: - Navigate to one of the repos of the above link, like</p> <p></p> <ul> <li>Now, copy the \"clone\" link.</li> </ul> <p></p> <ul> <li>Time to create your own repository, so open your own DevOps organization, and create a new repository (or project)</li> <li>When you have don that, your files-page will show a few options.  We will use the import-option.</li> </ul> <p></p> <ul> <li>Paste the copied url and click \"Import\"</li> </ul> <p></p> <p>You have now a new repo, with the code imported from the template project from ALOps.</p>"},{"location":"Setup/SettingUpYourFirstBuild/#and_now","title":"And now?","text":"<p>There is a big chance you're all done now.  Because of the \"azure-pipelines.yml\", it should have created a build pipeline automatically.</p> <p>If not, you can easily create it yourself: - Go to Pipelines / Builds - Click New / New Build Pipeline - Click \"Azure Repos Git\" - Select your new repo - Change the \"Pool / name\" to your own agent pool  - Now it will detect your yml file.  Click \"Run\" to save and run the build pipeline</p>"},{"location":"Setup/SetupLicense/","title":"ALOps License Setup","text":"<p>To register your ALOps installation, create a variable \"ALOps_LicenseId\" with value the provided licensekey. inject the \"License Key\" printed on the invoice in your pipelines via the Environment variable \"alops_licenseid\" or \"alops-licenseid\".</p> <p>You can do this in either a pipeline, or by using a variable group from the library (preferred)</p>"},{"location":"Setup/SetupLicense/#pipeline_variable","title":"Pipeline variable","text":"<pre><code>variables:\n- name: 'alops-licenseid'\nvalue: '&lt;your_license_uid&gt;'\n</code></pre>"},{"location":"Setup/SetupLicense/#variable_group","title":"Variable group","text":"<p>Create a variable group in the pipelines \"Library\", you can give this group any valid name. Import this variable group in the pipeline with the following yaml. Set a variable 'alops-licenseid' in this group with '' or link it to an Azure Key Vault. If you use Azure Key Vault, make sure you name the variable exactly 'alops-licenseid'. <pre><code>variables:\n- group: 'ALOps License'\n</code></pre>"},{"location":"Setup/SetupLicense/#recommended","title":"Recommended","text":"<p>We recommend to use 'Azure Key Vault' to keep the ALOps License UID in a central secure place, you can link this Key Vault into multiple collections, projects,... This scenario is the most secure and allows for central management of your License key.</p>"},{"location":"UsefulInfo/Globals/","title":"Global Variables","text":"<p>There are a few global variables ALOps can read during execution of all steps, that makes it a bit easier in some scenarios.  To use them, just create them globally in a variable group, or as pipeline variables to change behaviour of the pipeline accordingly.  Remark: a global variable can still be overruled by a task parameter.</p>"},{"location":"UsefulInfo/Globals/#these_global_variables_can_be_used_with_alops","title":"These Global Variables can be used with ALOps","text":"<ul> <li><code>alops_disable_urlencoding</code>: disables the .Net urlencoding to comply with some urls Microsoft uses for their symbol downloads.</li> <li><code>alops_disable_amsi</code>: disables windows defender, which sometimes blocks the execution of certain steps with errors like \"his script contains malicious content and has been blocked by your antivirus software\".</li> <li><code>alops_show_variable</code>: a variable mainly used in the \"ALOpsShowInfo\" task to show all variables that are current for your build pipeline.  Especially useful when the behaviour of a certain pipeline is not like expected, and you would like to investigate what is going on.</li> <li><code>alops_LicenseId</code>: if you have bought a license, just set up a global variable (most convenient is to use a variable group that you use in all your pipelines) with this name, and paste your license-id as value.  All pipelines will use that license for ALOps.</li> <li><code>alops_bc_license</code>: a global setting you could use for all your license-import steps.  This way, you don't need to set the variable for each step - it will take this as a default value.</li> <li><code>alops_bc_serverinstance</code>: default value for all \"bc_serverinstance\" settings in all steps</li> <li><code>alops_accept_image_eula</code>: accept eula for all necessary steps (mainly \"Docker).</li> <li><code>Alops_PrintMemoryStats</code>: Print Memory Stats in checkEnvironment - useful for checking why certain pipelines are slow.</li> <li><code>Alops_OverrideFinSqlPath</code>: File path to finsql.exe for all steps that uses this.</li> <li><code>Alops_UpdateHostsFile</code>: When set true in de pipeline it will update the hostfile to make accessing the container easier</li> <li><code>Alops_PrintInputDetails</code>: Boolean, prints task inputs with all parameters in LIST form</li> </ul>"},{"location":"UsefulInfo/Globals/#during_the_pipeline_run_there_are_a_few_global_variables_will_fill_for_your_convenience","title":"During the pipeline run, there are a few global variables will fill for your convenience:","text":"<p>With the step \"ALOpsInfo\" you can get to all variables that are available.  These are some ALOps-specific variables we created during the run:</p> <ul> <li><code>ALOPS_DOCKER_ADMINPASSWORD</code></li> <li><code>ALOPS_DOCKER_ADMINUSER</code></li> <li><code>ALOPS_DOCKER_CERTIFICATE</code></li> <li><code>ALOPS_DOCKER_CONTAINER_ID</code></li> <li><code>ALOPS_DOCKER_DNSNAME</code></li> <li><code>ALOPS_DOCKER_HOSTNAME</code></li> <li><code>ALOPS_DOCKER_IPADDRESS</code></li> <li><code>ALOPS_DOCKER_NAVSERVERINSTANCE</code></li> <li><code>ALOPS_DOCKER_VSIX</code></li> <li><code>ALOPS_DOCKER_WEBCLIENT</code></li> </ul>"},{"location":"UsefulInfo/WorkingWithArtifacts/","title":"How to work with Artifacts","text":"<p>This page explains a bit more on how to work with Artifacts.</p> <p>We support creating Docker images from  NAV v9.0 to BC v17.0 (and upcoming) with the new task <code>ALOpsDockerCreate</code>. The task includes: - Creating BC Docker images on the local repository - Creating Docker Images for NAV: 2016 (v9), 2017 (v10), 2018 (v11) - Creating Docker Images for BC: v13, v14, v15, v16 - Creating Docker Images for BC-Insider: v17  (SASToken / StorageAccount) - Pull/Push images with public/private registry. - Supports a \"Hint\", where the old name of docker images can be supplied, we'll try and figure out the correct new parameters - The new task should be inserted in the pipeline above \"ALOpsDockerStart\"</p>"},{"location":"UsefulInfo/WorkingWithArtifacts/#bccontainerhelper","title":"BcContainerHelper","text":"<p>We will need BcContainerHelper to build the images.  ALOps will install and maintain it, you don't have to do anything - although, you can, of course.  If you see anything fails in ALOps regarding the installation of BcContainerHelper, these scripts can help you to cleanly install it (with thanks to Kasper): - to uninstall all instances of NavContainerHelper <pre><code>$ModuleName = 'navcontainerhelper';\n$Latest = Get-InstalledModule $ModuleName; \nGet-InstalledModule $ModuleName -AllVersions | \n? {$_.Version -ne $Latest.Version} | \nUninstall-Module -WhatIf\n</code></pre> - to install BcContainerHelper manually: <pre><code>Install-Module BcContainerHelper -AllowClobber -force\n</code></pre></p>"},{"location":"UsefulInfo/WorkingWithArtifacts/#some_examples","title":"Some Examples:","text":"<p>Most basic Image creation based possible, only based on the old container naming. <pre><code>- task: ALOpsDockerCreate@1\ninputs:\nartifacthint: 'mcr.microsoft.com/businesscentral/onprem:16.2.13509.13779-be-ltsc2019'\n</code></pre></p> <p>The proper, new way of defining the version/type/country you want can be done very easy: <pre><code>- task: ALOpsDockerCreate@1\ninputs:\nartifactversion: '16.2'\nartifactcountry: 'be'\nartifacttype: OnPrem\n</code></pre></p> <p>Also not all parameters are required, if for example \"Version\" is not specified, we automatically take the latest. Example below will (today) resolve to \"onprem-16.4.14693.15445-be\" <pre><code>- task: ALOpsDockerCreate@1\ninputs:\nartifactcountry: 'be'\n</code></pre></p> <p>For BC-Insider you just have to specify the [sastoken] parameter, if [StorageAccount] is blank we assume \"bcinsider\". Do of course make sure to set the type to \"Sandbox\" as there are no OnPrem builds in insider. <pre><code>- task: ALOpsDockerCreate@1\ninputs:\nartifactcountry: 'be'\nartifacttype: Sandbox\nsastoken: $(bcinsider_sas_token)\n</code></pre></p> <p>To work with docker registries, specify the [dockerregistry] parameter, if its secured additionally specify [dockerusername] and [dockerpassword]. Tested on Docker registries [onprem/hosted] and Microsoft Container Registry (Azure) <pre><code>- task: ALOpsDockerCreate@1\ninputs:\nartifactversion: '16.2'\nartifactcountry: 'be'\nartifacttype: OnPrem\ndockerregistry: 'alops.azurecr.io'\ndockerusername: $(dtr_username)\ndockerpassword: $(dtr_password)\n</code></pre></p> <p>When using the new \"ALOpsDockerCreate\" in a pipeline, you have to clear the [docker_image] parameter on ALOpsDockerStart. ALOpsDockerStart with automatically pickup the image-name from the the ALOpsDockerCreate task. <pre><code>- task: ALOpsDockerStart@1\ninputs:\ndocker_pull: false\nmemory_gb: 8\ndocker_parameters: '--isolation=hyperv'\n</code></pre></p>"},{"location":"UsefulInfo/WorkingWithArtifacts/#migrating_your_old_build_pipeline","title":"Migrating your old build pipeline","text":"<p>To update your pipeline, it should just be a matter of adding the new task.</p> <p>The easiest is to reuse the exact image you were using, like in: <pre><code>- task: ALOpsDockerCreate@1\ninputs:\nartifacthint: 'mcr.microsoft.com/businesscentral/onprem:16.2.13509.13779-be-ltsc2019'\n</code></pre></p> <p>But better would be to specify the exact parameters you need to find the Artifact: <pre><code>- task: ALOpsDockerCreate@1\ninputs:\nartifactversion: '16.2'\nartifactcountry: 'be'\nartifacttype: OnPrem\n</code></pre></p> <p>If you have any issues or suggestions, please put them on GitHub</p>"}]}