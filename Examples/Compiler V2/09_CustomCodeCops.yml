name: $(Build.BuildId)

variables:
  - group: Secrets

pool: HOD-DOCKER

trigger: none

steps:
- checkout: self
  clean: true 

# You need to make sure to make the custom analyzer available in the source-directory  
# Here is an example for BusinessCentral.LinterCop (Thanks to Arthurvdv for the example!)
- task: PowerShell@2
  displayName: 'Download BusinessCentral.LinterCop.dll'
  inputs:
    targetType: 'inline'
    script: |
      $FileName = "DownloadFile.ps1"
      $GitHubUri = "https://raw.githubusercontent.com/StefanMaron/vsc-lintercop/master/$FileName"

      try
      {
          Write-Host "Downloading PowerShell script $GitHubFileName from $GitHubUri..." -ForegroundColor Yellow
          Invoke-WebRequest -Uri $GitHubUri -OutFile $env:AGENT_BUILDDIRECTORY\$FileName
      } 
      catch [System.Net.WebException] 
      {
          Write-Host "Error connecting to $GitHubUri. Please check your file name or repo name and try again." -ForegroundColor Red
      }

      Write-Host "Success. Now executing $FileName" -ForegroundColor Green

      & $env:AGENT_BUILDDIRECTORY\$FileName $env:BUILD_SOURCESDIRECTORY $false

- task: ALOpsAppCompiler@2
  inputs:
    artifacttype: 'Sandbox'
    alternativevsixurl: 'Latest'    # Important!  All CodeCops work against the latest dlls from Microsoft
    alcodeanalyzer: BusinessCentral.LinterCop.dll
